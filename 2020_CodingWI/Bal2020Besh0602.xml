<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="balisage-1-3.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?>
<?xml-model href="balisage-1-3.rng" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<?xml-stylesheet type="text/xsl" href="balisage-proceedings-html.xsl"?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
    version="5.0-subset Balisage-1.3">

    <title>Text Encoding and Processing as a University Writing Intensive Course</title>
    <!-- <subtitle></subtitle>-->
    <info>
        <abstract>
            <para>Can learning text encoding and markup languages constitute a <quote>writing
                    intensive</quote> experience for university students? Having taught
                undergraduate students from a wide range of majors from humanities to the sciences
                to develop web-based research projects with the the XML family of languages, the
                author proposes that such coursework should fulfill a common state university
                requirement of a research-oriented <quote>writing intensive</quote> or
                "writing-across-the-curriculum" course. Although coding and programming skills are
                often represented as a kind of literacy, the idea that learning markup technologies
                may constitute an <emphasis>intensive</emphasis> writing experience is less
                familiar. This paper calls for teaching markup technologies widely in a
                cross-disciplinary context to give students across the curriculum an accessible yet
                intensively challenging course that integrates coding and writing to investigate
                research questions.</para>
            <para>Not just any course that introduces students to markup should be considered
                writing intensive. Arguably, a class that involves tagging exercises without project
                development and that invites students to write reflectively about the experience is
                not engaging in an <emphasis>intensive</emphasis> way with the writing work we
                associate with coding in the full experience of developing a project. This paper
                argues that a <emphasis>writing intensive</emphasis> course involving the XML family
                of languages should require algorithmic problem-solving and decision making,
                research and citation of related projects, task management, and documentation to
                share the work and help others to build upon it. A course offering such experiences
                should be accessible to students from several disciplines, whether to a junior year
                English or history major with little to no programming experience, or a junior year
                computer science or information technology major with an interest in applied
                programming, unused to research questions that drive humanities scholarship. In
                presenting its case, this paper discusses the pedagogical theory and practice of
                teaching composition and code as well as the concepts of blind interchange and
                literate programming important to the XML markup community.</para>
        </abstract>
        <author>
            <personname>
                <firstname>Elisa</firstname>
                <othername>E.</othername>
                <surname>Beshero-Bondar</surname>
            </personname>
            <personblurb>
                <para>Elisa Beshero-Bondar is a member of the TEI Technical Council, as well as
                    Professor of Digital Humanities and Program Chair of Digital Media, Arts, and
                    Technology at Penn State Erie, the Behrend College. Until June 2020, she was a
                    professor of English Literature and Director of the Center for the Digital Text
                    at Pitt-Greensburg which has featured markup languages as a foundation of a
                    curriculum in Digital Studies. Her projects involve her in experimentations with
                    the TEI, including refining methods for computer-assisted collation of editions
                    and probing questions of interoperability to reconcile diplomatic and critical
                    edition encodings, as with the <link
                        xlink:href="https://frankensteinvariorum.github.io/viewer/">Frankenstein
                        Variorum</link>. She is the founder and organizer of the <link
                        xlink:href="http://digitalmitford.org">Digital Mitford project</link> and
                        <link xlink:href="https://digitalmitford.github.io/DigMitCS/">its usually
                        annual coding school</link>. Her ongoing adventures with markup technologies
                    are documented on <link xlink:href="http://newtfire.org">her development site at
                        newtfire.org</link>. </para>
            </personblurb>
            <affiliation>
                <jobtitle>Professor of Digital Humanities</jobtitle>
                <jobtitle>Program Chair of Digital Media, Arts, and Technology</jobtitle>
                <orgname>Penn State Erie, the Behrend College</orgname>
            </affiliation>
            <email>eeb4@psu.edu</email>
        </author>
        <keywordset role="author">
            <keyword>markup</keyword>
            <keyword>writing intensive</keyword>
            <keyword>literate programming</keyword>
            <keyword>interchange</keyword>
            <keyword>code literacy</keyword>
            <keyword>general education requirement</keyword>
            <keyword>pedagogy</keyword>
            <keyword>writing across the curriculum</keyword>
            <keyword>coding across the curriculum</keyword>
            <keyword>Text Encoding Initiative</keyword>
            <keyword>TEI XML</keyword>
            <keyword>Relax NG</keyword>
            <keyword>XML family of languages</keyword>
            <keyword>XPath</keyword>
            <keyword>XSLT</keyword>
            <keyword>HTML</keyword>
        </keywordset>
    </info>
    <section>
        <title>Coding literacy as a writing modality</title>
        <para>To any academic who remembers the exhilaration in the 1990s of navigating around an
            Andrew File System and posting on it a <quote>paperless syllabus</quote> in HTML, the
            application of the phrase <quote>teaching with technology</quote> in the university
            discourse of the 2010s may have a jarring sound. Scholarly markup geeks from a past
            century have lived to see <quote>technology</quote> for education be packaged in
            learning management systems that securely take care of all of our electronic
            interactions with students from posting announcements to grades. Even for 90s markup
            geeks, learning our way around the technologies driving Blackboardc Canvas, or Moodle
            can be abstruse and fretfully time-consuming, especially when we attempt applying their
            byzantine integrations with various proprietary software applications like Zoom or
            Panopto. Publications supporting educational technology innovations make evident that
            educational software applications are universally expected to be integrated and accessed
            from within a learning management system (LMS). For example, Hypothes.is, an open-source
            and fully open access technology for web annotation is now packaged and funneled into an
            LMS with a proprietary gradebook integration, without which faculty may not be aware of
            its existence or understand how to apply it in their courses.<footnote>
                <para>On the day of this writing, 13 July 2020, the <link
                        xlink:href="https://web.hypothes.is/">https://web.hypothes.is/</link>
                    promotes its proprietary LMS integration over its always free web service, even
                    in waiving fees for educational institutions for the fall 2020 semester.
                    Nevertheless, a paid-for integration with an LMS is unnecessary to anyone with
                    access to a web browser and a capacity to follow clear and simple instructions
                    to create a public or private annotation group.</para>
            </footnote> A group of faculty from Seton Hall university found that <quote>teaching
                with technology, can be the way to bridge perceived differences between disciplines,
                especially at the developmental stages of a writing-across-the-curriculum
                program</quote>, and in their work to develop new technologically-enhanced courses,
            they concentrate on the interactive writing opportunities afforded by faculty’s
            encounter with a university-wide investment in a learning management system.<footnote>
                <para>Kelly A. Shea, Mary McAleer Balkun, Susan A. Nolan, John T. Saccoman, and
                    Joyce Wright, <quote>One More Time: Transforming the Curriculum Across the
                        Disciplines Through Technology-Based Faculty Development and
                        Writing-Intensive Course Redesign</quote>
                    <emphasis role="ital">Across the Disciplines</emphasis> Volume 3 (2006) <link
                        xlink:href="https://wac.colostate.edu/docs/atd/articles/shea2006.pdf"
                        >https://wac.colostate.edu/docs/atd/articles/shea2006.pdf</link> Accessed 25
                    April 2020.</para>
            </footnote> We now rely on markup-based management architectures that control university
            website delivery and our work in the <quote>technology</quote> of higher education is
            widely presumed to be about form-filling, at most using a limited tag set from a menu
            system. We have been acculturated to expect that composition and digital media classes
            like <quote>Writing for the Web</quote> are and <emphasis>should be</emphasis> about
            writing in Wordpress templates that provide carefully constrained and
            little-investigated access to the code layer. <quote>We do not ride on the railroad; it
                rides upon us,</quote> wrote Henry David Thoreau, and we might as well update that
            for today’s university content management systems: we do not direct the content
            management system, it directs us.<footnote>
                <para>Henry David Thoreau, <quote>Where I lived and what I lived for</quote>
                    <emphasis role="ital">Walden: A Fluid-Text Edition. Digital Thoreau.</emphasis>
                    Version A (1847), para 17, <link
                        xlink:href="http://digitalthoreau.org/fluid-text-toc"
                        >http://digitalthoreau.org/fluid-text-toc</link>. Accessed
                    2020-04-12.</para>
            </footnote>
        </para>
        <para>Although we have little practical choice but to commit to developing course materials
            in frameworks that we do not choose for ourselves, those frameworks (e.g. Blackboard,
            Canvas, Moodle) are built from XML building blocks which the savvy customer can
            occasionally find ways to modify <quote>under the hood</quote> where permitted.<footnote>
                <para>See, for example, <link xlink:href="https://scholarlms.net/moodle-xml-format/"
                        >the documentation of Moodle XML format for quizzes</link>.</para>
            </footnote> XML establishes the context of educational technology in our educational
            institutions, but our access is carefully gated in ways that relegate modification of the framework to the level of the abstruse and esoteric. Those of us who teach students
            to write and build projects with markup technologies may be few in number, but we are
            the ones who are aware of the skills our students rapidly develop and hone over the
            course of a single semester—skills to build data models, search interfaces, and
            informational graphics according to their own design. Learning XML with its family of
            languages helps students to develop independently from <quote>black box</quote>
            software, and also helps make them informed consumers to choose the software they want
            to commit to particular tasks, to find the tools most amenable to user alterations
                <quote>under the hood</quote> and most friendly to transporting the data when the
            software inevitably upgrades or is no longer supported. Learning markup technologies is a way of learning the structures
            of the web of information, and much the way we learn the formal genre expectations of an
            essay or a poem, we learn formal ways of containing data and metadata in an XML
            framework driven by our interests in processing, sharing, accessing the data. We write
            documents to be read and acted upon by humans; and we write markup to be read
            and acted upon by humans and machines.</para>
        <para>XML markup and its family of languages itself has not become more abstruse or
            difficult to learn since the millenium. Indeed, instruction is much easier by the year 2020 with many
            tutorials available and more powerful processing methods available now.<footnote>
                <para>The author finds it is becoming easier to teach XPath, XSLT, and XQuery since
                    the introduction of XPath 3.0 and 3.1 with the simplicity of reading the
                    application of multiple functions using the simple map and arrow concatenator.
                    These have made it easier to follow a simple step-by-step thinking process in
                    chaining functions together. This improvement in XPath readability is a
                    refinement of our available writing instruments making them far more accessible
                    to new learners.</para>
            </footnote> However, the learning of markup technologies and the XML stack has been
            cultivated too narrowly to be recognized as a general skillset beneficial to students
            across disciplines. Given universities’ deep investment in XML-based ecosystems, can we
            imagine a widely-accessible cross-disciplinary course that inverts the relationship
            between code and form-box, that engages students and faculty in organizing ideas with
            markup languages that they themselves control? This paper argues that a sustained
            learning and application of markup technologies, not as implicit structure, but as
            explicit document data modeling and development, should serve as a broadly accessible
            cross-disciplinary writing-intensive experience for students. This exploration
            should open doors to students who would otherwise not consider themselves <quote>tech
                savvy</quote> or capable programmers to learn computational tools that make for more powerful capacities to write, develop, and interact with the document data and the semantic web.</para>
        <para>In awakening students to the technologies that shape composition, classes that teach
                <quote>digital writing modalities</quote> (or composition that involves multiple
            media forms) may provide faculty markup practitioners a well-established and widely
            lauded context for teaching markup languages in a way that educational institutions can classify as a writing-intensive experience. For writing
            instructors, <quote>digital writing modalities</quote> or <quote>multimodal
                writing</quote> can motivate dialogue about the medium as the message and the choice
            of form following function and audience. Addressing recent trends to assign student
            writing compositions in digital modalities such as audio and video, Laura Giovanelli and
            Molly Keener observe that <quote>Well-designed pedagogy recognizes multimodal writing’s
                potential to foster student agency and ownership as increasingly participatory
                citizens where literacy means composing in a range of print and digital media,
                genres, and modes, where students are consumers <emphasis>and</emphasis> ethical
                creators.</quote>
            <footnote>
                <para>Laura Giovanelli and Molly Keener, <quote>How to talk about copyright so kids
                        will listen, and how to listen about copyright so kids will talk</quote> in
                    Grace Veach, <emphasis role="ital">Teaching​ Information Literacy and Writing
                        Studies: Volume 2, Upper-Level and Graduate Courses</emphasis> (Purdue
                    University Press, 2019-01-15), 225. ProQuest ebook.
                    <!--http://ebookcentral.proquest.com/lib/pitt-ebooks/reader.action?docID=5717973--></para>
            </footnote> Writing with markup languages can easily be taught in the context of digital
            multimodal composition that fosters student agency and ownership of the code base. Much
            as students compose by remixing and ironically applying visual or auditory memes, they
            might apply markup languages to compose by self-consciously reordering scripts of
            official documents and develop controlled vocabularies that help communities access
            their heritage.<footnote>
                <para>A good example of such application of markup languages is <link
                        xlink:href="https://dhtraining.org/hilt/course/introduction-to-the-text-encoding-initiative-tei-for-black-digital-humanities/"
                        >Jessica Lu’s and Caitlin Pollock’s 2019 HILT course, <quote>Introduction to
                            the Text Encoding Initiative (TEI) for Black Digital
                        Humanities</quote></link> which organized training in markup to support
                        <quote>new ways of accessing, reading, sharing, and analyzing texts of
                        marginalized people</quote>.</para>
            </footnote> Semester-long XML-based writing-intensive courses want access to a good
            syntax-checking code editor (such as the oXygen XML editor), writeable web space with
            secure FTP access, and possibly an XML database (such as eXist-dB) and a GitHub account,
            instead of the more ubiquitous Wordpress account and the Adobe suite as the
            students’ multimodal writing desk. While I do not expect every digital composition
            instructor to flock to these technologies (though I wish they might), I do anticipate
            that those of us who can teach the XML family of languages can do so in a way
            that constitutes a writing-intensive experience valuable to students across the
            curriculum, and especially valuable in programs with majors, minors, and certificate
            programs supporting the digital humanities.</para>
        <para>Perhaps the most significant university context supporting university-wide
            interdisciplinary pedagogy in coding and programming, and thereby markup languages and
            their applications, is the call for <quote>coding across the curriculum</quote>, which
            sometimes explores the intersections between writing and coding, seeing both as a
            foundation for literacy in the twenty-first century. Learning to write programming code
            engages a student in writing commands, conditional expressions, and descriptive
            annotation as well as metacommentary in documentation. For the distinctly imperative
            aspects of coding, Annette Vee finds parallels in Kenneth Burke’s speech-act theory of
            human expression as performative, to move an audience to process ideas in response to a
            scripted delivery, whether that audience is human or machine, and she calls for greater
            awareness of the intersection of scripting that connects the writing and coding process.<blockquote>
                <para>Exploring the nature of language, action, and expression through programming
                    allows us to think about the relationship between writing and speech differently
                    and also to consider the ways in which technologies can combine with and foster
                    human abilities. Computational and textual literacy are not simply parallel
                    abilities, but intersectional, part of a new and larger version of literacy.<footnote>
                        <para> Vee, Annette, <emphasis role="ital">Coding Literacy: How Computer
                                Programming Is Changing Writing</emphasis> The MIT Press, 2017.
                                <link xlink:href="doi:10.2307/j.ctt1s476xn"
                                >https://www.jstor.org/stable/j.ctt1s476xn</link>. Accessed 14 Apr.
                            2020.</para>
                    </footnote></para>
            </blockquote> When coding is understood as literacy, its nexus with writing becomes
            explicit when we think of it on the same terms as developing language skills. But the coding literacy movement may not be as profoundly educational as we imagine. A developer writes in <emphasis role="ital">Slate</emphasis> that <quote>coding literacy</quote> books for children
            are not what students need to learn to code, when these simply involve following scripts
            obediently to get a so-called correct answer. Rather, the article claims, the learning
            process needed for coding is simply learning to do any process thoroughly and well, like taking apart a
            wooden stool and putting it back to together, or learning how to optimize the efficient
            use of cookie cutters in rolled dough.<footnote><para>Joe Morgan, <quote>I’m a developer. I won’t teach my kids to code and neither should you.</quote> <emphasis role="ital">Slate</emphasis>. 6 December 2018. Accessed 13 July 2020. <link xlink:href="https://slate.com/human-interest/2018/12/against-teaching-kids-to-code-creativity-problem-solving.html ">https://slate.com/human-interest/2018/12/against-teaching-kids-to-code-creativity-problem-solving.html</link> </para></footnote> Really learning to code, that is not just about
            learning a correct syntax to earn points or get the <quote>correct answer</quote>, is
            something more experimental, creative, and purposeful, with awareness of many possible paths to try. That kind of learning does not belong to
            computer science departments any more than writing belongs to English departments, as
            David J. Birnbaum and Alison Langmead make explicit: <blockquote>
                <para>The first step toward learning to code is to recognize that computer
                    programming is not computer science; it is more like writing. Everyone can learn
                    to do it, and can be given the opportunity to learn to do it in ways that are
                    appropriate for their disciplines. We offer humanists years of practice in
                    learning to write; let us give them the chance also to learn to code. The second
                    step is to recognize that learning a programming language is like learning a
                    foreign language, except that it is much easier.<footnote>
                        <para> David J. Birnbaum and Alison Langmead, <quote>Task-Driven Programming
                                Pedagogy in the Digital Humanities</quote> in <emphasis role="ital"
                                >New Directions for Computing Education: Embedding Computing Across
                                Disciplines</emphasis>, ed. Samuel B. Fee, Amanda M.
                            Holland-Minkley, and Thomas E. Lombardi (Springer International
                            Publishing, 2017) 76.</para>
                    </footnote></para>
            </blockquote> These are analogies to learning to write or learning a foreign language,
            intended to persuade humanists to adopt coding into their disciplines, but the analogies
            do not in themselves constitute an argument for coding and programming as potentially an
            intensive professional writing experience for students of any discipline.</para>
        <para>That argument for the writing-intensiveness of coding can be found
                <quote>outside</quote> the humanities. In the context of programming education,
            Felienne Hermans and Marlies Aldewereld propose that more students would be interested
            in computer science if they learned to program in a way that followed models for
            learning to write. They suggest that programming instruction would be improved if it
            adapted the way writing instructors model examples of their writing process for students
            to break it down into discrete tasks more efficiently. They cite a study in which the
            elementary students comprehended scientific concepts better when they were assigned
            short writing assignments that engaged the topic. The suggestion that writing
            reflectively and observantly, and understanding a context for a program to be working
            makes the material more widely accessible and <quote>could help a broader group of kids
                identify as programmers!</quote><footnote><para>Felienne Hermans and Marlies Aldewereld, <quote>Programming is Writing is
                        Programming</quote>
                    <emphasis role="ital">Programming ’17: Companion to the first International
                        Conference on the Art, Science and Engineering of Programming</emphasis>
                    No.33 (April 2017) 1-8; 7. <link
                        xlink:href="https://dl.acm.org/doi/pdf/10.1145/3079368.3079413"
                        >https://dl.acm.org/doi/pdf/10.1145/3079368.3079413</link>.</para>
            </footnote> Indeed, this idea that writing to document your observations can help to
            learn a science enacts a return to an earlier and more integrated approach to education,
            before the <quote>sciences</quote> had become formally distinct from
                <quote>humanities</quote>: the late eighteenth century saw the scientific poems of
            Erasmus Darwin and calls for poetry that would bring zoology and botany to life and
            encourage sympathy with the natural world.<footnote>
                <para>For context, see Sharon Ruston, <quote>The Application of Natural History to
                        Poetry</quote>
                    <emphasis role="ital">Literature and Science Hub</emphasis> University of
                    Liverpool. <link
                        xlink:href="https://www.liverpool.ac.uk/literature-and-science/essays/ruston_hist/"
                        >https://www.liverpool.ac.uk/literature-and-science/essays/ruston_hist/</link>.
                    Accessed 14 April 2020. </para>
            </footnote> We have known that the act of writing enhances learning in across
            disciplines for a long time now. But futher, as Hermans and Alderweld point out,
            students can learn programming more easily if they are taught in the mode of writing
            instruction, with modeled examples and activities that hone observation skills. What
            might this mean for learning to work with XML? It might involve students reviewing
            markup, schemas, interfaces, and visualizations from established XML projects as part of
            their course experience, and writing about how they observe things to be working. For
            example, students can be given assignments to explore a project site like the <link xlink:href="https://mapoflondon.uvic.ca/index.htm">Map
                of Early Modern London</link> or the <link xlink:href="http://shelleygodwinarchive.org/">Shelley-Godwin Archive</link> to look at the code
            under the hood and describe how they understand the pieces of the project to fit
            together. In exploring sites like these, students in the author’s classes have often found a basis for
            understanding what kinds of research questions and web reading and research tools their
            encoding and programming work can make possible, and they often build on what they learn in their own projects to understand how they can organize information about people, places, contexts, language patterns, revision history, and more.<footnote><para>The Map of Early Modern London provides especially helpful, transparent documentation of their markup and editorial practice throughout the site with a strong investment in <link xlink:href="https://mapoflondon.uvic.ca/teaching.htm">teaching resources</link> to assist new coders.</para></footnote></para>
        <para>It is probably no coincidence that Donald Knuth modeled his concept of <quote>literate
                programming</quote> with programming for document formatting in the 1980s. In this
            context the programming of a machine to format electronic documents unites fundamentally
            with the action and reproduction of writing. Knuth’s now-familiar concept seems simple
            in hindsight: <quote>Instead of imagining that our main task is to instruct a computer
                what to do, let us concentrate rather on explaining to human beings what we want a
                computer to do.</quote><footnote>
                <para>Donald Knuth, <quote>Literate Programming</quote>, <emphasis role="ital">The
                        Computer Journal</emphasis> 27:2 (1984) 97-111, 97. <link
                        xlink:href="https://doi.org/10.1093/comjnl/27.2.97"
                        >https://doi.org/10.1093/comjnl/27.2.97</link>. Accessed 25 April
                    2020.</para>
            </footnote> The process of literate programming heightens an old association of verbal
            text with fabric textile, applying Knuth’s concepts of <emphasis>weave</emphasis> and
                <emphasis>tangle</emphasis>: <blockquote>
                <para>One line of processing is called <emphasis role="ital">weaving</emphasis> the
                    web; it produces a document that describes the program clearly and that
                    facilitates program maintenance. The other line of processing is called
                        <emphasis role="ital">tangling</emphasis> the web; it produces a
                    machine-executable program. The program and its documentation are both generated
                    from the same source, so they are consistent with each other.<footnote>
                        <para>Knuth 2.</para>
                    </footnote></para>
            </blockquote> Literate programming is part of the XML specifications and became
            paradigmatic for the the XML family of languages by the turn of the new millenium. In
            2002 Norm Walsh modeled its application to the DocBook XSLT stylesheets by applying
            namespaces to permit the tangling of actionable code with documentation.<footnote>
                <para>Norman Walsh, <quote>Literate Programming in XML</quote> presented at
                        <emphasis role="ital">XML 2002</emphasis>, 15 October 2002. <link
                        xlink:href="https://nwalsh.com/docs/articles/xml2002/lp/paper.html"
                        >https://nwalsh.com/docs/articles/xml2002/lp/paper.html</link> Accessed 25
                    April 2020.</para>
            </footnote>. Responding to Walsh’s work, Eric van der Vlist prepared a clear and
            thoroughly-documented explanation how literate programming applies to developing schema
            rules for project coding through XML with embedded Relax NG code, readily transformable
            into multiple formats to produce schema validation checking as well as human-readable
            web-ready documentation.<footnote>
                <para>Eric Van der Vlist, <quote>Literate Programming: Generating Relax NG
                        Schemas</quote> in <emphasis role="ital">Relax NG</emphasis>, O’Reilly
                    Books, 2003. <link
                        xlink:href="http://books.xmlschemata.org/relaxng/relax-CHP-14-SECT-2.html"
                        >http://books.xmlschemata.org/relaxng/relax-CHP-14-SECT-2.html</link>.</para>
            </footnote> And over the course of its development from the early 1990s onward, the
            One-Document-Does-It-All (ODD) system has modeled literate programming for the purpose
            of compiling and delivering the Guidelines of the Text Encoding Initiative (TEI) as a
            combination of documentation and processing code instantiating the schema rules of the
            community-maintained XML vocabulary.<footnote>
                <para>Sebastian Rahtz and Lou Burnard, <quote>Reviewing the TEI ODD System</quote>
                    <emphasis role="ital">DocEng ’13: Proceedings of the 2013 ACM symposium on
                        document engineering</emphasis>, September 2013, 193-196. <link
                        xlink:href="https://doi.org/10.1145/2494266.2494321"
                        >https://doi.org/10.1145/2494266.2494321</link> Accessed 25 April
                    2020.</para>
            </footnote> With its early and continuing investment in literate programming, from its specifications to its schema modeling, the XML family of languages should be
            understood as thoroughly writerly.</para>
        <para>Student coders can gain an introductory experience in literate programming in
            designing ODD schemas with descriptive glosses and explanation encoded together with
            schema rules in project. Whether or not we understand the drafting of an ODD
            customization to constitute an experience in embedded programming, we can recognize its
            value for writing intensive literacy, because it involves students writing the rules for
            a project to work systematically and designing its data for consistency and precision,
            and it provides for description and explanation that can make a project sharable with
            others. Markup, documentation and programming work in the development of XML-based
            projects should be promoted within educational institutions as a distinctly intensive
            experience of writing applied to build resources soundly and well.</para>
    </section>
    <section>
        <title>Writing intensively with the XML family of languages</title>
        <para>The aspect of XML encoding that makes it so problematic or impossible for
            interoperational processing (even within a shared vocabulary like the TEI) is the
            semantic naming of tags, what Desmond Schmidt has called its
                    <quote><emphasis>illocutionary force</emphasis></quote>.<footnote>
                <para>Desmond Schmidt, <quote>Towards an Interoperable Digital Scholarly
                        Edition</quote>, <emphasis role="ital">Journal of the Text Encoding
                        Initiative</emphasis> Issue , November 2014. <link
                        xlink:href="https://journals.openedition.org/jtei/979"
                        >https://journals.openedition.org/jtei/979</link>. Accessed 28 April
                    2020.</para>
            </footnote> This trouble for universalized processing is also a feature of XML that
            makes it writerly and scholarly in nature, and gives it power as a research tool, a power that is enhanced when
            new coders learn not just how to tag but also how to manage and process their
            tagging as a controlled system. Confronting the challenge of processing the markup and
            sharing it with others outside one’s discourse community (oneself, one’s team, or one’s
            semester class) is what this section designates as <emphasis>intensive</emphasis> about
            a course in writing with markup. An introductory writing experience with markup
            languages may familiarize students with the data structure and well-formedness and some
            of the issues of transformation and sharing the data, but intensification of the writing
            challenge begins with confronting the management issues of writing a customization and
            designing schema validation rules. Still more intensification is applied when students
            learn how they can navigate and process the markup data.</para>
        <para>This issue with writerly nature of XML coding and processing is not well appreciated
            in the larger context of digital humanities work or among professional developers eager to facilitate the publication process and separate it from the markup practice. Coders can produce complicated, even intricate
            structures with XML and TEI and give impatient developers headaches, but we would do well to encounter
            those structures as building materials the way writers do and give our students the
            tools to work with them. Rather than designing projects primarily to suit the needs of
            developers or content management systems, markup practitioners can learn the writing
            intensive way to control the developing tools as their writing instruments. There will
            be a time and place for the content management system optimized for interoperation, but
            this should not be the only way that students and scholars learn to write with
            markup.</para>
        <para>A course in text encoding could take a concentration within a
            discipline like English Literature, as Kate Singer’s class at Mount Holyoke did, to
            concentrate collectively on constructing a digital edition of a collection of poems.
            Singer found that the <quote>broad-based ‘humanities language’ of the TEI enabled
                students to question, historicize, and reconsider the poetic terminology we use to
                describe poems</quote>. She and her students found that the controlled vocabulary of
            the TEI, in prioritizing larger patterns of structure while permitting customization to
            the encoder of historically constructed and shifting categories of poetic genre, left
            room for a community of scholars to rethink form or apply the old constructions as they
            saw fit. In the context of a course, that work can be excitingly experimental. The
            pedagogical benefit of engaging students in markup and its applications was to foster
            decision-making, documentation, and design thinking, as Singer found her students eager
            to take on design decisions for customizing their own interface for their edition. Not
            only did they benefit by gaining tech skills, but they also became more observant
            readers of poetry as well as the interfaces and infrastructures of larger-scale digital
            scholarly editions they encountered. <quote>This kind of interpretive markup may,
                finally, give us some inkling of how TEI might be used as an analytical tool for
                smaller-scale, case-based projects perfect for undergraduates as they learn to parse
                and categorize their own textual situations.</quote><footnote>
                <para>Kate Singer, <quote>Digital Close Reading: TEI for Teaching Poetic
                        Vocabularies</quote>, <emphasis role="ital">The Journal of Interactive
                        Technology &amp; Pedagogy</emphasis> issue 3: 15 May 2013. <link
                        xlink:href="https://jitp.commons.gc.cuny.edu/digital-close-reading-tei-for-teaching-poetic-vocabularies/"
                        >https://jitp.commons.gc.cuny.edu/digital-close-reading-tei-for-teaching-poetic-vocabularies/</link>.
                    Accessed 28 April 2020.</para>
            </footnote>. Courses like these prioritize the intellectual engagement of a class with
            the document objects they are investigating, and here the markup is clearly a research
            and investigation tool. Fitting the students' markup to an externally imposed uniform publication framework would have made the work less messy and easier to publish, but would have stifled the students' experimentation and removed them from the intellectual decision-making process of doing their own project development. Even unfinished work in the course of a short semester is a stepping stone to renewed engagement in a process of structured work with document data modeling, querying, checking, testing, and transforming to share their work.</para>
        <para>The XML family of languages were designed not only to be widely accessible, but also
            to be a vocabulary that the writer controls, consults, remixes, and transforms. It does
            not take very long to acquaint new coders to the rules of how to tag a document, or how
            to turn a <quote>plain text</quote> document into an XML document, though often people
            experience a little frustration with typing in the attributes or figuring what they can
            do with attributes. The first week or two of a class that involves markup methods can
            orient people to the basic rules of well-formedness, but that quickly introduces an
            engaging intellectual experience when we ask students to develop their own hierarchies
            to organize what they are reading, and when we invite our students to try to recognize
            what is implicit, and find ways to use elements, attributes, or comments to make that
            explicit. The act of inscribing markup has been recognized as a writing process, but if
            it goes no further than an exercise in tagging, perhaps we should consider this
            something like writing a reflective paper, a response that sharpens one’s observation
            and critical thinking skills.</para>
        <section><title>Starting from a mess</title>
            <para>Just as we think of free-writing as a valuable exercise to start a first preliminary
                draft in a composition class, in teaching markup, a certain amount of mess and
                unreliability is okay as we are learning or figuring out what matters to prioritize.
                Often new coders introduce far more differently named elements than they really need, or
                that would be baffling to keep track of in a real-life project. To understand how to code helpfully and meaningfully, a student needs to confront the
                problem of sharing and reproducibility. Being able to share a decision process and a set of rules for an XML project to describe its work is similar to the awareness of an audience
                emphasized in rhetoric and composition classes as a means to craft better sentences, to
                trim out verbosity, to outline the thesis project.</para>
            <para>The road to improvement can be based on the same principles of understanding how
                to convey relationships, and how to prioritize a main idea with a subordinate
                clause. A student might write a paragraph like the following in a draft that could
                benefit from some rounds of revision: <blockquote>
                    <para>Historically, women have had a tough time when it comes to writing novels
                        and combatting prejudices and sexism. Many female authors have had to
                        publish their novels with a male pseudonym or as an anonymous author. When
                        writing <emphasis role="ital">Frankenstein</emphasis>, Mary shelley wrote it
                        among her friends to see who could write the best horror story and she did
                        not tag it with her name. The famous story was left anonymous so her friends
                        wouldn't have a prejudice view when reading it. The story ended up being her
                        most famous book and she was a female writer, who wrote a horror story about
                        a male creator and a frightening, male creature.<footnote>
                            <para>The quote is taken from a student website project submitted to the
                                author’s Nineteenth-Century British Literature survey course in Fall
                                2019.</para>
                        </footnote>
                    </para>
                </blockquote>Instructors who teach writing courses understand the complexities of
                advising a student on how to revise writing like this. We often comment that the
                students' ideas are <quote>good</quote> or <quote>interesting</quote>, but we need a
                stronger sense of how the ideas connect, and every sentence needs to support a
                single central idea, in this case about how Mary Shelley, like other women authors
                in English history, opted to conceal a female identity in publishing her work.
                Beyond simple misspellings and missed capitalization, we can identify conceptual
                problems of subordination, especially evident in the last sentence where the fame of
                the book and the female identiy of the writer are placed at the same main idea
                level, out of chronological sequence. The ordering of ideas and the decision of
                where to place subordinate clauses is a problem we can associate with organization
                or hierarchy. Rewriting such a paragraph sometimes involves reorganizing and
                condensing, pulling together apparently disconnected parts in the first draft. For
                example, here is my own attempt to rewrite the student’s paragraph: <blockquote>
                    <para>Historically, many women authors faced a sexist and prejudiced publishing
                        industry and opted to conceal their identities either by publishing with a
                        male pseudonym or anonymously, as Mary Shelley did with the anonymous first
                        publication of <emphasis role="ital">Frankenstein</emphasis> in 1818. The
                        novel, a horror story about a male creator and a frightening male creature,
                        became her most famous work, and eventually was published with her name on
                        the title page.</para>
                </blockquote> My suggested rewriting of this seems a little unsatisfactory because I
                sense here is something the student might have developed, a sort of loose end from
                the draft, something about the idea of a female author writing about a male
                scientist creator and a male creature, whose violent conflict drives this book.
                Would she have wanted to explore that issue of a woman author investigating male
                conflict? Is that perhaps the topic of another essay entirely? Writing and rewriting
                can impose order but also cut out possible avenues of development.</para>
            <para>I can find similar examples that demonstrate issues with subordination in
                students’ first XML encoding efforts. In my roughly seven consecutive years of
                teaching undergraduates to code with the XML family of languages, I notice a
                recurring pattern in the first three of weeks of a semester that some students have
                difficulties with conceptualizing dependencies, much like the issues we identified
                in the student paragraph about Mary Shelley. Students just starting to code often
                prepare shallow hierarchies, and instead of bundling list items together into a
                wrapped cluster, they make a very flat tree where every line is its own entry. These
                students benefit from seeing examples of nested markup, and also from understanding
                something about how the markup may be processed to work out how attributes can be
                used to disambiguate or categorize to refine the markup. For that reason, I have
                found that inviting my students to write their first markup on a recipe, one that
                contains an interesting variety of ingredients, measurement units, and activities,
                provides a very clear and easily recognizable sense of structure with lots of
                categories of information. I ask students to envision a scenario for the encoding
                that tries to create a system for filing documents: <blockquote>
                    <para>First, read this recipe for homemade bread, and pretend you are filing it
                        with hundreds of other recipes that you need to fit a set purpose, such as
                        running a restaurant, in which you need to keep track of kinds and
                        quantities of ingredients required. XML is written to store information, and
                        when we apply it to a situation with numbers and units, like with coding
                        recipes, the code we write can help make computerized calculations, and help
                        optimize searching across a collection for particular kinds of ingredients.
                        Your code might be designed to help categorize ingredients by what part of
                        the grocery store they can be found in. The challenge of the assignment is
                        to write code that helps categorize ingredients, mark necessary equipment,
                        and stages for processing, but the system you develop is up to you.<footnote>
                            <para><quote>XML Exercise 1</quote> Coding and Data Visualization course
                                taught at Pitt-Greensburg, 2019-2020. <link
                                    xlink:href="https://dh.newtfire.org/XMLExercise1.html"
                                    >https://dh.newtfire.org/XMLExercise1.html</link>. The author’s
                                series of assignments developing from XML to Relax-NG, regular
                                expressions and document up-conversion, XPath, XSLT, XQuery, as well
                                as HTML, SVG, CSS, and JavaScript are generally accessible at <link
                                    xlink:href="https://dh.newtfire.org"
                                    >https://dh.newtfire.org</link>. Accessed 14 July 2020.</para>
                        </footnote></para>
                </blockquote> It is fascinating to see the variety of encodings students submit for
                this assignment, with no two being much alike. With a few exceptions the students
                usually are able to submit well-formed XML by day 2 of the course, but they
                sometimes don't quite understand the concept of nesting structures or demonstrating
                relationships, as for example this tagging of the ingredients list of a sourdough
                recipe.
                <programlisting>
 &lt;recipe type="allAges" name="sourdoughIngredients"&gt;
 &lt;measurement&gt;1 1/4 cups&lt;/measurement&gt; (&lt;amount&gt;160 grams&lt;/amount&gt;)
 &lt;ingredient&gt;white bread flour&lt;/ingredient&gt;, plus more for dusting
 &lt;measurement&gt;1/4 cup&lt;/measurement&gt; (&lt;amount&gt;38 grams&lt;/amount&gt;)
 &lt;ingredient&gt;stone-ground whole-wheat flour&lt;/ingredient&gt;
 &lt;measurement&gt;1/4 cup&lt;/measurement&gt; (&lt;amount&gt;32 grams&lt;/amount&gt;)
 &lt;ingredient&gt;stone-ground whole rye flour&lt;/ingredient&gt;
 &lt;measurement&gt;1/2 teaspoon&lt;/measurement&gt;
 &lt;ingredient&gt;instant yeast or bread machine yeast&lt;/ingredient&gt;
 &lt;measurement&gt;1 teaspoon&lt;/measurement&gt;
 &lt;ingredient&gt;table salt&lt;/ingredient&gt;
 &lt;measurement&gt;1/4 cup&lt;/measurement&gt; (&lt;amount&gt;55 grams&lt;/amount&gt;) 
 &lt;ingredient&gt;dry fermented cider&lt;/ingredient&gt;
 &lt;measurement&gt;1/2 cup&lt;/measurement&gt; (&lt;amount&gt;120 grams&lt;/amount&gt;)
 &lt;ingredient&gt;lukewarm water&lt;/ingredient&gt; (&lt;temperature&gt;80 degrees&lt;/temperature&gt;), 
 plus an optional 1 tablespoon recipe&gt;&lt;/recipe&gt;
 &lt;!--jgb: You may substitute a Pilserner beer for the dry fermented cider. --&gt;</programlisting>
                Here we see a common problem for new learners of XML: thinking that white space is
                sufficient to relate like to like, rather than recognizing the need to position
                wrapper elements. The student has not quite understood that the
                    <code>&lt;measurement&gt;</code> and <code>&lt;amount&gt;</code> elements are
                not really associated together. Nor has the student tried to apply attributes, yet,
                but they have ventured an XML comment about ingredient substitution. The code is
                promising for its regularity and consistency, but lacks an understanding of how to
                work with the XML tree hierarchy. Another student seems to have a stronger grasp on
                the assignment, but even here we can find some issues that relate to writing
                problems of redundancy or overreliance on a particular word, here the attribute
                    <code>@type</code> being overused:
                <programlisting>
&lt;recipe type="bread" name="country loaf (pain de campagne)"&gt;
  &lt;measurement type="cup"&gt;1 1/4 cups (&lt;measurement type="gram"&gt;160 grams&lt;/measurement&gt;)&lt;/measurement&gt;
  &lt;!-- sd: is this a good/okay way to do measurement types? it seems weird but i don't really know --&gt;
  &lt;ingredient type="dry"&gt;white bread flour&lt;/ingredient&gt;, plus more for dusting 
  &lt;measurement type="cup"&gt;1/4 cup (&lt;measurement type="gram"&gt;38 grams&lt;/measurement&gt;)&lt;/measurement&gt;
  &lt;ingredient type="dry"&gt;stone-ground whole-wheat flour&lt;/ingredient&gt;
  &lt;measurement type="cup"&gt;1/4 cup (&lt;measurement type="gram"&gt;32 grams&lt;/measurement&gt;)&lt;/measurement&gt;
  &lt;ingredient type="dry"&gt;stone-ground whole rye flour&lt;/ingredient&gt;
  &lt;measurement type="tsp"&gt;1/2 teaspoon&lt;/measurement&gt;
  &lt;ingredient type="dry"&gt;instant yeast or bread machine yeast&lt;/ingredient&gt;
  &lt;measurement type="tsp"&gt;1 teaspoon&lt;/measurement&gt;
  &lt;ingredient type="dry"&gt;table salt&lt;/ingredient&gt;
  &lt;measurement type="cup"&gt;1/4 cup (&lt;measurement type="gram"&gt;55 grams&lt;/measurement&gt;)&lt;/measurement&gt;
  &lt;ingredient type="wet"&gt;dry fermented cider&lt;/ingredient&gt; (may substitute Pilsener beer; see
    headnote) 
  &lt;measurement type="cup"&gt;1/2 cup (&lt;measurement type="gram"&gt;120 grams&lt;/measurement&gt;)&lt;/measurement&gt;
  &lt;ingredient type="wet"&gt;lukewarm water&lt;/ingredient&gt; (&lt;temp&gt;80 degrees&lt;/temp&gt;), 
  plus an &lt;measurement type="tsp"&gt;optional 1 tablespoon &lt;/measurement&gt; 
  DIRECTIONS 
  &lt;step n="1"&gt;&lt;equipment type="utensil"&gt;Whisk&lt;/equipment&gt; together the flours, yeast and salt in a 
  &lt;equipment type="bakeware"&gt;mixing bowl&lt;/equipment&gt;&lt;/step&gt;. 
  &lt;step n="2"&gt;Combine the cider and water in a &lt;equipment type="bakeware"&gt;liquid measuring cup&lt;/equipment&gt;&lt;/step&gt;. 
  &lt;step n="3"&gt;Add the liquid to the flour mixture; use a &lt;equipment type="utensil"&gt;spatula&lt;/equipment&gt; 
  or &lt;equipment type="utensil"&gt;bench scraper&lt;/equipment&gt; or your hand moistened with water to blend them for about a minute
  &lt;/step&gt;. The dough should be shaggy yet cohesive. 
  &lt;step n="4"&gt;Cover the bowl with a &lt;equipment type="cloth"&gt;towel&lt;/equipment&gt;; 
  let the dough rest for &lt;time&gt;20 minutes&lt;/time&gt;&lt;/step&gt;. 
  &lt;step n="5"&gt;Moisten your kneading hand. If the dough seems stiff, 
      add the optional tablespoon of water.&lt;/step&gt;
  &lt;step n="6"&gt;Stretch one edge of the dough (still in the bowl), then press it into the center of
  the bowl. Repeat this about a dozen times, moving clockwise to catch all sides of the dough&lt;/step&gt;. 
(This should take &lt;time&gt;1 or 2 minutes&lt;/time&gt;.) 
  &lt;step n="7"&gt;Turn the dough over so the seams are on the bottom&lt;/step&gt;. 
  &lt;step n="8"&gt;Cover and let rest for &lt;time&gt;20 minutes&lt;/time&gt;&lt;/step&gt;. 
  &lt;step n="9"&gt;Repeat the clockwise stretching and folding two more
        times, with &lt;time&gt;20-minute&lt;/time&gt; rests after each&lt;/step&gt;. 
  &lt;step n="10"&gt;Cover and refrigerate &lt;time&gt;at least 8 hours and up to 24 hours&lt;/time&gt;&lt;/step&gt;. 
The dough should have doubled. If it hasn't, leave it on the counter until it does. 
   &lt;step n="11"&gt;Lightly flour a work surface&lt;/step&gt;. 
   &lt;step n="12"&gt;Use a &lt;equipment type="cloth"&gt;pastry cloth&lt;/equipment&gt; or clean
            &lt;equipment type="cloth"&gt;dish towel&lt;/equipment&gt; to line a round &lt;equipment
            type="bakeware"&gt;colander&lt;/equipment&gt;. Dust the cloth with flour&lt;/step&gt;. 
  &lt;step n="13"&gt;Transfer the dough to the floured work surface. Fold the edges toward the center to create
        a round shape, turning it over so the seams are on the bottom&lt;/step&gt;. 
  &lt;step n="14"&gt;Let it rest for &lt;time&gt;5 minutes&lt;/time&gt;, then transfer to the colander, seam side up&lt;/step&gt;. 
  &lt;step n="15"&gt;Cover with a &lt;equipment type="cloth"&gt;towel&lt;/equipment&gt; and let the dough rise for
            &lt;time&gt;1 1/2 hours&lt;/time&gt;.&lt;/step&gt;
  &lt;step n="16"&gt;&lt;time&gt;Thirty minutes before baking&lt;/time&gt;, 
       place a &lt;equipment type="bakeware"&gt;cast-iron Dutch oven (lid on)&lt;/equipment&gt; 
       or &lt;equipment type="bakeware"&gt;enameled cast-iron pot with a lid (on)&lt;/equipment&gt; 
       in the oven; preheat to &lt;temp&gt;475 degrees&lt;/temp&gt;&lt;/step&gt;. 
  &lt;step n="17"&gt;Carefully remove the hot pot from the oven.&lt;/step&gt;
  &lt;step n="18"&gt;Turn the dough out onto the counter so the seams are on the bottom&lt;/step&gt;. 
  &lt;step n="19"&gt;Use &lt;equipment type="utensil"&gt;kitchen scissors&lt;/equipment&gt; 
      to make 8 snips on the top of the dough in an evenly spaced spoke pattern, 
      each about 1/4-inch deep&lt;/step&gt;. 
  &lt;step n="20"&gt;Lift the dough and carefully drop it into the hot pot. 
         Immediately cover with the hot lid&lt;/step&gt;. 
  &lt;step n="21"&gt;Bake for &lt;time&gt;30 minutes&lt;/time&gt;, then reduce the heat to 
       &lt;temp&gt;450 degrees&lt;/temp&gt;&lt;/step&gt;. 
  &lt;step n="22"&gt;Uncover and bake for &lt;time&gt;8 to 10 minutes&lt;/time&gt; or
        until the crust is dark brown&lt;/step&gt;. 
Try to minimize the amount of time the oven door is open. The bread is done when its internal temperature 
registers &lt;temp&gt;205 degrees&lt;/temp&gt; on an &lt;equipment type="utensil"&gt;instant-read thermometer&lt;/equipment&gt; 
and the loaf sounds hollow when knocked on the underside. 
  &lt;step n="23"&gt;Transfer the loaf to a &lt;equipment type="bakeware"&gt;wire rack&lt;/equipment&gt; 
         to cool for at least &lt;time&gt;1 hour&lt;/time&gt; before cutting&lt;/step&gt;. 
&lt;/recipe&gt;</programlisting>
                The nested <code>&lt;measurement&gt;</code> elements inside <code>&lt;measurement&gt;</code> elements show a problem the student was trying to solve with hierarchy, 
                and suggest a good opportunity for the instructor to discuss with the student how to deal with all the information given about
                equivalent units (grams to cups). We could suggest the student use just one measurement element and try encoding the equivalency information in attribute
                values, for example. And we need to think about the representation of fractions: If the code is going to
                be processed by a computer to, say triple this recipe, how would it be best to
                represent the numerical quantities and conversion factors? What is remarkable here
                for an early XML assignment is the student decision to mark types of equipment
                within the steps. The student could reconsider the variety of attributes, but the
                effort to track categories of measurement as well as categories of ingredient (wet
                vs. dry) is admirable on a first experience with angle brackets. </para> 
            <para>Even when a student quickly learns how to apply hierarchies, they are, of course,
                prone to inconsistencies like these before they learn to write schema validation
                code:
                <programlisting>
  &lt;step n="9"&gt;&lt;process type="action"&gt;Lightly flour&lt;/process&gt; a 
      &lt;item type="equimpent"&gt;work surface.&lt;/item&gt; 
      Use a &lt;item type="equipment"&gt;pastry cloth&lt;/item&gt; or 
      &lt;item type="equipment"&gt;clean dish towel&lt;/item&gt; to 
      &lt;process type="action"&gt;line a 
      &lt;item type="equipment"&gt;&lt;adj type="equipment"&gt;round&lt;/adj&gt; 
              colander&lt;/item&gt;&lt;/process&gt;.&lt;/step&gt;
 &lt;step n="10"&gt;&lt;process type="action"&gt;Dust&lt;/process&gt; the 
     &lt;item type="equipment"&gt;cloth&lt;/item&gt; with
     &lt;item type="ingredient"&gt;flour&lt;/item&gt;.&lt;/step&gt;
 &lt;step n="11"&gt;&lt;process type="action"&gt;Transfer&lt;/process&gt; the 
     &lt;item type="ingredient"&gt;dough&lt;/item&gt; to the 
     &lt;adj type="equipment"&gt;floured&lt;/adj&gt;
     &lt;item type="equipment"&gt;work surface&lt;/item&gt;.&lt;/step&gt;</programlisting>
                This student reveled in coming up with complex hierarchies in his first week of
                coding, but a typo means that his attribute values are inconsistently marked. Such
                imprecision might pass unnoticed as a relatively harmless error in a student essay,
                but here it becomes an opportunity to introduce the power of schema writing to
                students, to write their own spell checkers for their attribute values and control
                which elements and attributes are permitted to appear at each level of the
                hierarchy. </para>    
                <para>In the first week of my class, students usually move from encoding a recipe to
                encoding a poem or a piece of historical correspondence. Changing to code a
                different genre of document can lead students to recognize different kinds of data
                and observations about the formal dimensions and organization of patterns, as well
                as the interest in referencing different kinds of information like names, dates,
                people, and places, as well as images, motifs, rhyme. Quite frequently student
                beginners will take the text content of a document and repeat it in an attribute
                value, as for example wrapping code around a name as given in a text, and using that
                name in an attribute value on the element, until they receive some suggestions that
                they might want to use the attribute as a key for a standard identifier whenever
                this individual is mentioned by their various names. Students who have difficulty
                constructing dependent clauses may find the preparation of an informative,
                non-redundant hierarchy just as challenging as their composition courses, and while
                their first efforts are observably messy, they can be discussed in terms of how to
                simplify if one were to prepare a large collection and wanted to work systematically
                with a particularly interesting and tractable kind of data.</para>
        </section>
        <section><title>Developing a schema, cultivating interchange, and writing professionally</title>
            <para>Students often improve their markup dramatically when they learn to write Relax NG
                schema code that creates rules for encoding. This may be a first data-modeling
                experience for students in a general education context, when they are called upon to
                think in a <quote>meta</quote> or higher order reflective way about formalizing their
                code, and making it possible for others to understand it and reproduce it. Learning to
                write schema code also leads to writing
                comments to explain decisions and document the code. The following example pairs a short coded document with a student’s schema, and a conversation with another student who was reviewing the code and offering advice. First, here is the XML the student prepared with some good-natured snark from my own assignment instructions:
                <programlisting>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;?xml-model href="01-22_SCHEMA_rngEx02.rnc" type="application/relax-ng-compact-syntax"?&gt;
&lt;root&gt;
    &lt;intro&gt; Make sure you do the following: &lt;/intro&gt;
    &lt;step num="1"&gt; 1) &lt;act type="spec"&gt;Save&lt;/act&gt; your &lt;obj type="comp"&gt;Relax NG file&lt;/obj&gt;
        &lt;desc type="rel"&gt;with the &lt;obj type="comp"&gt;.rnc extension&lt;/obj&gt; at the &lt;obj type="conc"
                &gt;end&lt;/obj&gt;&lt;/desc&gt; and &lt;act type="unspec"&gt;work with it&lt;/act&gt; in the &lt;desc type="adj"
            &gt;same&lt;/desc&gt;
        &lt;obj type="comp"&gt;file directory&lt;/obj&gt;
        &lt;desc type="rel"&gt;with your &lt;obj type="comp"&gt;.xml file&lt;/obj&gt;.&lt;/desc&gt;
    &lt;/step&gt;
    &lt;step num="2"&gt; 2) &lt;act type="spec"&gt;Associate&lt;/act&gt; your &lt;obj type="comp"&gt;.rnc schema&lt;/obj&gt;
        &lt;desc type="rel"&gt;with your &lt;obj type="comp"&gt;.xml file.&lt;/obj&gt;&lt;/desc&gt;
        &lt;exp&gt;(You are &lt;desc type="rel"&gt;finished&lt;/desc&gt; with this &lt;obj type="conc"&gt;exercise&lt;/obj&gt; if
            your &lt;obj type="comp"&gt;XML&lt;/obj&gt; is &lt;desc type="rel"&gt;&lt;act type="spec"&gt;associated&lt;/act&gt;
                with your schema&lt;/desc&gt; and &lt;desc type="adj"&gt;both&lt;/desc&gt;
            &lt;obj type="comp"&gt;files&lt;/obj&gt; have &lt;act type="spec"&gt;come out&lt;/act&gt;
            &lt;desc type="adj"&gt;"green"&lt;/desc&gt; in &lt;obj type="comp"&gt;oXygen&lt;/obj&gt;.)&lt;/exp&gt;
    &lt;/step&gt;
    &lt;step num="3"&gt; 3) &lt;act type="spec"&gt;Upload&lt;/act&gt;
        &lt;desc type="adj"&gt;BOTH&lt;/desc&gt;
        &lt;obj type="comp"&gt;files&lt;/obj&gt; here. We &lt;act type="unspec"&gt;need to see&lt;/act&gt; your &lt;desc
            type="rel"&gt;&lt;obj type="comp"&gt;.xml file&lt;/obj&gt; and your &lt;obj type="comp"&gt;.rnc
            file&lt;/obj&gt;.&lt;/desc&gt;
    &lt;/step&gt;
&lt;/root&gt;
&lt;!-- bb_1/22/20: I wanted to keep it simple for once, so I literally used the assignment as a text. Sue me.--&gt; 
                </programlisting>
                Here is the Relax NG schema in compact syntax, where a new pattern of writing extensive commentary is emerging in the student (whose initials are bb). The peer-reviewing student is amp, who had learned to write schemas and design projects in a previous semester: 
                <programlisting>
                  datatypes xsd = "http://www.w3.org/2001/XMLSchema-datatypes"
start = root

#bb_1/22/20: root is the root element
root = element root{intro, step+}

#bb_1/22/20: step is one of our 'highest' content objects on the hierarchy
step = element step{num, (exp|act|obj|desc|text)+}
#amp: This would be better as mixed content! (We've already touched on this in class, but I'll leave a note here as well) So, it would look like this: step = element step{num, mixed{exp | act | obj | desc)+}}

#bb_1/22/20: intro is a misc element
intro = element intro{text}

#bb_1/22/20: other important places in the hierarchy
exp = element exp{(type|act|obj|desc|text)*} #exp = explanation
desc = element desc{(type|act|obj|text)*}    #desc = description

#amp: This is the same as before: these two would be better written with mixed content! So: exp = element exp{mixed{(type | act | obj | desc)*}}
#desc = element desc{mixed{(type | act | obj)*}}

act = element act{type, text}                #act = action
obj = element obj{type, text}                #obj = object

#bb_1/22/20: attributes
num = attribute num{xsd:int}
type = attribute type{text}     #types: 
                                  #comp = computer
                                  #conc = concept
                                  #rel = relate
                                  #adj = adjective
                                  #spec = specific
                                  #unspec = unspecific

#amp: My first comment is about comments! I'm glad to see you using comments 
not only to leave notes to the instructors, but also to give information about decisions 
that you're making while coding. 
This is so helpful when it comes to projects that you're going to share publicly, 
because it allows others to see these choices and better understand your code. 
So, great work with that! 

#amp: Another thing that I like with your schema is the organization! 
You have clearly designated sections for your elements and attributes that make your code really clear. 

#amp: For the future, I would try working more with the other repetition indicators, 
as well as with datatypes! In this specific assignment, you could code for the date of the assignment, 
and use xsd:date or xsd:YearMonth (or both!) to give even more metadata in your xml. 
Overall, this is a well-organized, simple schema that you'll be able to develop 
into a more complex schema if you were to continue with it (and with future projects!)</programlisting>
                The beginner student, bb, experimenting with tidy, highly legible commentary on his code, including mapping out attribute values he might use to replace the ambiguous text. But we also see students beginning to hear from each other about project work on which they collaborate and getting used to seeing a code file as a site of productive conversation and ongoing revision.   
                
            </para>
            <para>When students learn only tagging and do not learn how to write schema validation or process their own code
                to visualize and analyze the data they have marked, they remain unaware of what the
                markup makes possible or of the problems imposed by
                imprecision and inconsistency. They may be tagging correctly, but not in a way that
                communicates meaningfully or reliably. As they first become aware of the human
                unreliabilities in applying markup, they may come away with a limited idea that the
                tree structures we create are necessarily subjective and arbitrary. They would be
                reinforced in this thinking by old arguments from those who find embedded markup a
                source of intrusive confusion. For example, Johanna Drucker has asserted that
                embedded markup confuses levels of discourse: <quote>Putting content markers into
                    the plane of discourse (a tag that identifies the semantic value of a text
                    relies on reference, even though it is put directly into the character string)
                        <emphasis>as if</emphasis> they are marking the plane of reference is a
                    flawed practice. Markup, in its very basis, embodies a contradiction. It
                    collapses two distinct orders of linguistic operation in a confused and messy
                    way.</quote><footnote>
                    <para>Johanna Drucker, <emphasis role="ital">SpecLab: Digital Aesthetics and
                            Projects in Speculative Computing</emphasis> (Chicago: University of
                        Chicago Press, 2009) n. 26. pp. 205-206. Drucker cites Dino Buzetti as
                        originating the argument of a fundamentally confused data model in XML in
                        his paper, <quote>Text Representation and Textual Models</quote>, ACH-ALLC
                        1999 Conference Proceedings. <link
                            xlink:href="http://www2.iath.virginia.edu/ach-allc.99/proceedings/buzzetti.html"
                            >http://www2.iath.virginia.edu/ach-allc.99/proceedings/buzzetti.html</link>.
                        Accessed 28 April 2020.</para>
                </footnote>Certainly messiness and confusion can be applied to an ill-conceived data
                model as well as it can to a piece of disorganized and unrevised writing. But
                embedded encoding itself is only a <quote>mess</quote> to the extent that it defies
                comprehension, navigation, and processing by an informed reader of markup who is a
                member of a community of practice. Against Drucker’s dismissal of markup as mess we
                should counter the frequent practice in the markup community of <emphasis>blind
                    interchange</emphasis>, as Syd Bauman defined it in 2011: <blockquote>
                    <para>you want my data; you go to my website or load my CD and download or copy
                        both the data of interest and any associated files (e.g., documentation or
                        specifications like a TEI ODD, a METS profile, or the Balisage tag library);
                        based on your knowledge of my data that comes from either the documents
                        themselves or from the associated files (or both), you either change my data
                        to suit your system or change your system to suit my data as needed. Human
                        intervention, but not direct communication, is required.<footnote>
                            <para>Bauman, Syd, “Interchange vs. Interoperability,” <emphasis
                                    role="ital">Proceedings of Balisage: The Markup Conference 2011.
                                    Balisage Series on Markup Technologies</emphasis>, vol. 7
                                (2011). <link
                                    xlink:href="https://doi.org/10.4242/BalisageVol7.Bauman01"
                                    >https://doi.org/10.4242/BalisageVol7.Bauman01</link>.</para>
                        </footnote></para>
                </blockquote> Far from posing a <quote>mess</quote>, the actions of documenting
                descriptive markup make it sustainable and sharable when the encoder is removed in
                time and space and technological delivery system from those who encounter the code.
                Blind interchange is the benefit of the tangle and weave of literate programming,
                and it is reinforced by communities that encounter the code and interact with it.
                Understood in this way, the <quote>mess</quote> of markup is indistinguishable from
                the <quote>mess</quote> of writing; both may be ordered with care and explanation
                for an audience, first an audience of one’s instructor and peers, and then an
                audience one does not necessarily meet in person.</para>
           
        </section>
        <section><title>Writing-intensive querying, processing, and transforming</title>
        <para>Teaching students how to query their XML code and how to transform it for publication encourages new systems of thinking and
            gives writers access to their own means of production. The learning required takes
            weeks, not years, and is suitably incorporated in a university semester without needing
            specialized computing prerequisites. Not until we teach students how to customize, query, or transform their markup can
            they engage with it in a way that educational institutions might characterize as
                <emphasis>writing intensive</emphasis>. By way of reference, the Pennsylvania State
            University’s cross-curricular definition of a writing intensive course requires that
            writing be used <quote>to help students learn course content</quote>, as well as
                <quote>ways of writing in the discipline</quote>, and that it have formal
            expectations delivered in structured assignments. These expectations are familiar to us from
            university composition courses in the requirements for research papers and thesis
            documents with structured sections, appendices, but can also be communicated in the
            context of encoding XML projects according to a carefuly developed schema and a
            well-documented codebase. Most importantl and pertinent to XML project development is
            the expectation that writing-intensive courses engage in significant rounds of revision:<blockquote>
                <itemizedlist>
                    <listitem>
                        <para>Writing seen as processes that develop through iterations</para>
                    </listitem>
                    <listitem>
                        <para>Writing in the course includes a combination of formal and informal assignments<footnote>
                                <para><quote>Features of a Writing Intensive Course</quote>, Penn
                                    State Learning, 2020. <link
                                        xlink:href="https://pennstatelearning.psu.edu/features-writing-intensive-course"
                                        >https://pennstatelearning.psu.edu/features-writing-intensive-course</link>.
                                    Accessed 28 April 2020.</para>
                            </footnote></para>
                    </listitem>
                </itemizedlist>
            </blockquote> Markup and coding with the XML family of languages becomes an
                <emphasis>intensive</emphasis> writing experience when students return to it and
            revise it, to better document decisions for the project team, to better document
            decisions for readers outside the project, to improve the precision of the data, to
            simplify the categories to make the code more coherent in categorizing and processing
            information. When students learn to inspect the code and share its customization in
            project teams, the markup becomes subject to intensive review and systematic revision to
            make it sharable rather than subjective. The more this is done, and the more experience
            that students and scholars gain, the more prepared they are to share in wider
            conversations. For example, markup practitioners in the classicist community share
            applications of the EpiDoc standard, and a medievalist graduate student prepares to
            speak at the annual conference of the Text Encoding Initiative or at the annual
            Kalamazoo International Congress on Medieval Studies. As with peer-reviewed scholarship
            in any discipline, the XML code-base is subject optimally to heated debate and decisions
            are made befitting communities of practice.</para>
       
        <para>Because the XML family of languages is amenable to rapid learning, a student can
            become a <quote>stack developer</quote> easily in the course of a semester, as Clifford
            Anderson observed of the course he taught students in XQuery: <quote>XQuery makes it
                possible for students to become productive without having to learn as many computer
                science or software engineering concepts. A simple four or five line FLWOR
                expression can easily demonstrate the power of XQuery and provide a basis for
                students' tinkering and exploration.</quote><footnote>
                    <para>Anderson, Clifford B. <quote>On Teaching XQuery to Digital Humanists</quote>,
                        <emphasis role="ital">Proceedings of Balisage: The Markup Conference 2014.
                            Balisage Series on Markup Technologies</emphasis>, vol. 13 (2014). <link
                                xlink:href="https://doi.org/10.4242/BalisageVol13.Anderson01"
                                >https://doi.org/10.4242/BalisageVol13.Anderson01</link>.</para>
                </footnote> As XQuery developers know, the simple
            "for", "let" "where", "order by" and "return" statements that make a "FLWOR" are good
            ways to introduce students to programming concepts quickly and give them powers to
            construct all kinds of new data structures from an XML document, whether HTML, SVG
            (scaleable vector graphics), or structured text formats like CSVs to be imported into
            spreadsheets, or JSON formats for structured maps and arrays. Students work at the intersections of different data formats with exploring what they can build out of XML trees. Bringing students to work at these intersections between data formats leads code-writers to a decision making
            process about streamlining the code-base, making it more legible, tractable, XPath-able.
            Learning XPath and writing XSLT or XQuery to process XML moves a
            coder from following rules obediently so that others will someday process the data, to becoming
            an active intellectual investigator who can wield markup as a skilled professional writer.</para>
        </section>
    </section>
    <section>
        <title>An example of writing intensive interchange work: two university projects on Emily
            Dickinson </title>
        <para>University students can and do create projects <quote>built to last</quote>, that is,
            launched in a way that others can build on and continue based on the documentation they
            provide. As a case in point, let us consider two markup projects, decades apart,
            addressing the poetry of Emily Dickinson.</para>
        <para>The first is a proof-of-concept proposal for a PhD thesis prepared by then graduate
            student at University of Virginia, Michele Ierardi, and as of 2020, it is now only
            accessible on the web from the Wayback Machine: <link
                xlink:href="https://web.archive.org/web/20191014042502/http://www.cs.virginia.edu/~ajf2j/emily/stab.html"
                >Translating Emily: Digitally Re-Presenting Fascicle 16</link>.<footnote>
                <para>Michele Ierardi, <emphasis role="ital">Translating Emily: Digitally
                        Re-Presenting Fascicle 16</emphasis>, ~1999. The Wayback Machine capture of
                    14 October 2019: <link
                        xlink:href="https://web.archive.org/web/20191014042502/http://www.cs.virginia.edu/~ajf2j/emily/stab.html"
                        >https://web.archive.org/web/20191014042502/http://www.cs.virginia.edu/~ajf2j/emily/stab.html</link>.
                    Accessed 28 April 2020.</para>
            </footnote> The project involved an exercise applying 1990s HTML and an early form of
            JavaScript to render Emily Dickinson’s handwritten variants on her own poems in a way
            that did not demote those variants to a footnote, but gave them equal space using the
            capacities of hypertext. On reading a Dickinson’s poems on the site, the reader would
            encounter Dickinson’s own different versions of a line in slowly flashing text. The
            editor’s hope in designing her interface was to make readers more aware of Dickinson’s
            open-endedness, in not cancelling out multiple versions of a line, that all
            possibilities could coexist. The site was a proof of concept that did not materialize
            into a PhD thesis project, but it persisted and influenced my teaching of American
            Literature courses when I wanted to share Dickinson’s unusual writing process with my
            students and give them an experience of an interesting and accessible (if slightly
            hypnotizing) digital edition interface. The JavaScript on the site ceased to function
            around 2010, and soon thereafter I began seeking a way to continue accessing this
            cleanly and simply encoded project in a way that would still benefit my students.</para>
        <para>In 2015, soon after I had begun teaching courses in coding and the XML stack at
            Pitt-Greensburg, I was fortunate to find a group of students interested in poetry and
            fascinated by the possibilities of digital archive recovery work. The students and I
            contacted Michele Ierardi and obtained her permission to reconstruct her site. This
            involved converting the code from HTML to TEI P5, as well as adding more data researched
            and supplied by my students to include TEI critical apparatus markup that would encode
            Dickinson’s variants as well as other printed versions of the same poems in a series of
            editions published after Dickinson’s death. Their new goal was to build on Ierardi’s
            work and create a readable interface for comparing the multiple versions of Dickinson’s
            poems, and to begin expanding that work to include other fascicles (the term for the
            bundles of poems that Dickinson tied together with thread). My students’ site is the
            second <link xlink:href="http://dickinson.newtfire.org/">Emily Dickinson project</link>,
            strongly bound to the first.<footnote>
                <para>Nicole Lottig, Brooke Stewart, Alex Mielnicki, Brooke Lawrence, and Rebecca
                    Parker, <emphasis role="ital">Emily Dickinson</emphasis>, Newtfire, 2015. <link
                        xlink:href="http://dickinson.newtfire.org/"
                        >http://dickinson.newtfire.org/</link>. Accessed 28 April 2020.</para>
            </footnote> These students have since graduated from university, but they continue to
            work on this project, adding a new fascicle and tinkering with the interface, and I
            understand from the ongoing project director, Nicole Lottig, that she intends to
            continue coding and developing the site to display all of Dickinson’s fascicles as a
            long-term project. An excellent sampling of the project’s interface for reading a
            Dickinson poem and seeing its variant texts and images together is its display of <link
                xlink:href="http://dickinson.newtfire.org/16/1605.html">Poem 1605</link>, which
            shows how most of the early print editions cut out Dickinson’s entire last stanza and
            typically ignored her variants. 
            The editors share <link
                xlink:href="http://dickinson.newtfire.org/16/xml/1605variant.xml">their TEI code
                from the interface</link>, which applies critical apparatus markup with parallel segmentation in
            the TEI. The students opted to represent all witnesses even when they were silent, as demonstrated in their coding decisions for the last stanza of poem 1605. They also faced a significant challenge to encode Dickinson’s uncanceled variant passages in her manuscript, and found a way to do this by applying the <code>@type</code> attribute with values of "var0" and "var1":
        <programlisting>
             &lt;lg&gt;
                &lt;l n="17"&gt;&lt;app&gt;
                    &lt;rdg wit="#df16 #fh"&gt;And then a Plank in Reason, broke,&lt;/rdg&gt;
                    &lt;rdg wit="#ce #poems3"&gt;&lt;/rdg&gt;
                &lt;/app&gt;&lt;/l&gt;
                &lt;l n="18"&gt;&lt;app&gt;
                    &lt;rdg wit="#df16 #fh"&gt;And I dropped down, and down&#8212;&lt;/rdg&gt;
                    &lt;rdg wit="#ce #poems3"&gt;&lt;/rdg&gt;
                &lt;/app&gt;&lt;/l&gt;
                &lt;l n="19"&gt;&lt;app&gt;
                    &lt;rdg wit="#df16 #fh" type="var0"&gt;And hit a World, at every plunge,&lt;/rdg&gt;
                    &lt;rdg wit="#df16" type="var1"&gt;And hit a World, at every Crash&#8212;&lt;/rdg&gt;
                    &lt;rdg wit="#ce #poems3"&gt;&lt;/rdg&gt;
                &lt;/app&gt;&lt;/l&gt;
                &lt;l n="20"&gt;&lt;app&gt;
                    &lt;rdg wit="#df16 #fh" type="var0"&gt;And Finished knowing&#8212;then&#8212;&lt;/rdg&gt;
                    &lt;rdg wit="#df16" type="var1"&gt;And Got through&#8212;knowing&#8212;then&#8212;&lt;/rdg&gt;
                    &lt;rdg wit="#ce #poems3"&gt;&lt;/rdg&gt;
                &lt;/app&gt;&lt;/l&gt;
            &lt;/lg&gt;</programlisting>
        In their transformation to HTML (linked above), the students applied JavaScript and CSS to the variant data coded in these attributes to produce a dynamic and distinctive reading interface permitting the reader a ready view of comparison data. 
        </para>
        <para>In preparing this project, the students had the benefit of building on an earlier and
            simpler markup model, as well as a sense of purpose in giving a remarkably interesting
            project a new lease on life. They needed to study the TEI P5 guidelines and essentially
            took a <quote>crash course</quote>, as undergraduates from a range of majors in English,
            Creative Writing, and Information Sciences in manuscript encoding and textual
            scholarship, in the course of a semester. They learned to transform the code and
            designed the interface in the Fall 2015 semester, and then redesigned and improved the
            interface while investigating a new research question in a following Spring 2016 term.
            Over the course of one year, in the context of university coursework, the students not only designed a new reading interface but also explored a
            serious research question of how these editions compare to one another. Writing XSLT and
            XQuery on the project, these students produced SVG visualizations of <link
                xlink:href="http://dickinson.newtfire.org/16/dash.html"><quote>Comparative Dash
                    Reduction</quote></link> (measuring which editions most frequently normalized
            Dickinson’s dash punctuation into commas, semicolons, or periods), and <link
                xlink:href="http://dickinson.newtfire.org/16/networkAnalysis.html">a network
                analysis</link> to investigate which editions share the most variants in common.
            This was created with XQuery to pull and calculate data from the TEI critical apparatus markup they had modelled for the poems. 
            The network analysis explored how frequently published versions aligned with Dickinson’s writing in the manuscript versions, based on generating counts with XPath of how frequently a particular version (coded as a reading witness) aligned with other versions. The students wrote XQuery code to extract this data into simple TSV
            (tab-separated values file) and plotted in Cytoscape network analysis software. The programming work they did with XQuery was built on a foundation of their own care in modeling the markup and designing the rules for the project schema.</para>
        <para>The student website documents its methodology extensively and I now use it as a model
            for my current students to prepare documentation that <link
                xlink:href="http://dickinson.newtfire.org/16/conclusion.html">features code and
                coding decisions</link>. Along the way of producing it and sustaining their
            codebase, the project team cultivated <link
                xlink:href="http://dickinson.newtfire.org/contact.html">multiple GitHub repositories
                with issue tracking</link> as they turned to new sources of data and worked to
            combine Fascicles 6 and 16 into a new site. Their writing intensive experience involved
            countless messages to each other to fix broken code, make a visualization work, update
            the website, refine the CSS and JavaScript. The professional experience with web
            development was took them far beyond what would be possible in a course in tagging and
            markup alone, or in web development within a content management system. The writing
            intensive part was unquestionably in producing and testing and refining their own
            interface. And the project keeps on giving to future students.</para>
        <para>In Fall 2019, a colleague of mine from the History department, William Campbell, did me
            the great honor of taking my coding course, following a tradition at Pitt begun when I
            took David Birnbaum’s XML-stack coding course on Obdurodon in Spring 2013.<footnote>
                <para>David J. Birnbaum, Digital Humanities, Obdurodon. <link
                        xlink:href="http://dh.obdurodon.org/">http://dh.obdurodon.org/</link>.
                    Accessed 28 April 2020.</para>
            </footnote>. Campbell launched <link xlink:href="http://brecon.newtfire.org">The Brecon
                Project</link>, together with students on his team, to study the manuscript
            tradition of the foundation charter of a Reformation-era collegiate church and school
            in Wales. The students did not need to know medieval Latin to work on the document data
            modeling and even to apply critical apparatus markup with a tightly controlled schema
            combining Relax NG and Schematron, generated from a TEI ODD customization that they
            devised and revised over the course of their project meetings. For the students and my
            History colleague involved in the project, this was their introduction to the TEI
            critical apparatus as a document data model. They turned to previous projects
            from our course to follow some examples of critical apparatus markup in order to
            understand how to prepare their own.
            Without needing to consult the Dickinson project team, the Brecon team was able to adapt
            and build on the example of their markup to take their own study in new directions, recognizing how their project diverged. For the Brecon team, the text of the charter was not a
            bundle of poems, but nevertheless required a modeling of textual variation over time.
            Alyssa Argento, a returning student who was mentoring project teams and continuing
            learning XSLT and SVG on her own, took on the challenge of trying to show how the
            manuscript and print witnesses compared quantitatively: which versions of the charter shared the most material in common,
            inspired by the example of the network analysis on the Dickinson project. Finding her
            computer unable to install the latest version of the network analysis software that the
            Dickinson team had relied on for their visualization, Argento studied the project data, worked out
            how to arrange eight witnesses as nodes in a circle, and produced a network graph by
            herself with weighted edges and sized nodes to provide a detailed visual summary of
            how much the eight different versions shared in common across 25 sections of the
            charter. Having produced a static network visualization, she then studied how to
            make it interactive by applying JavaScript to address attributes on the SVG elements and
            to associate those SVG elements with corresponding columns and rows in HTML tables containing data from each section of the charter. Her
            interactive visualization, accessible at <link
                xlink:href="http://brecon.newtfire.org/html/analysis/network.html "
                >http://brecon.newtfire.org/html/analysis/network.html</link> represents work that
            she envisioned and worked out by herself with occasional input from me and the project
            team, and while it needs work in the documentation area, it represents a line of
            succession from earlier projects in my course. I share it here to demonstrate what is
            possible for undergraduates to learn, very quickly, with the benefit of the XML
            stack.</para>
        <para>The many student projects developed in the two <quote>sibling</quote> University of
            Pittsburgh coding courses taught by David J. Birnbaum (see
            <link xlink:href="https://dh.obdurodon.org">https://dh.obdurodon.org</link>) and by me with our respective cohorts of
            student peer-mentors over the past decade are now my richest data set for comprehending
            the possibilities of interchange and up-conversion and development on a code base.<footnote><para>David Birnbaum’s course in Spring 2013 oriented me to the XML family of languages and also inspired me to attempt organizing my own classes and teaching materials on markup technologies</para></footnote> Our
            students show us how this work is not only writing intensive in the moment of
            application, but intensifies over time as we learn new ways of doing things and build on
            the model of previous projects. </para>
    </section>
    <section>
        <title>Writing about code to pay a project forward</title>
        <para> When students prepare a project in markup, they are not simply writing papers to be
            filed in a course-specific context. They are preparing a research site and their work
            can often be continued by them or others. Students can be building beyond the
            constraints of a single semester, and even if they are not tempted to return to the
            project, they can leave scaffolding behind for others to continue the work or alter its
            direction, or retrieve the files. Awareness of the potential energy of the work they are
            doing can give shape to an encounter with markup languages in the course of a semester.
            The energy input over a course of weeks puts emphasis on preparing material that others
            can read and reuse. Assignments for a writing intensive experience can be constructed
            with attention to: <orderedlist>
                <listitem>
                    <para>reading the code and documentation of other projects, critiquing it, and
                        building on it</para>
                </listitem>
                <listitem>
                    <para>preparing documentation meant to be read by peers and professor(s) working
                        with you, and meant to be read by others who access your code from a
                        repository. Such documentation may include: <itemizedlist>
                            <listitem>
                                <para>Kanban board workflow management</para>
                            </listitem>
                            <listitem>
                                <para>README.md files in a GitHub repository</para>
                            </listitem>
                            <listitem>
                                <para>developing task lists and and issue tracking</para>
                            </listitem>
                            <listitem>
                                <para>responding to questions and assisting your teammates on a
                                    project discussion forum like Slack</para>
                            </listitem>
                        </itemizedlist></para>
                </listitem>
            </orderedlist> These are informal writing-intensive activities to do with taking
            responsibility for method and processes, for managing the intellectual content of a
            project. Studying how copyright applies to code and markup and choosing a license for
            sharing the work should also be part of this experience.</para>
        <para>Giving students access to the full set of tools in the XML arsenal and establishing
            both immediate (in-semester) short-range and long-range possibilities for their work
            will introduce students from any background to the power of markup languages and with
            the experience of writing to form and connect with communities of practice. This cannot
            fail to be a professionalizing experience. Even in developing projects that are not
            successful, there will be opportunities to recognize in failures what to document, how
            to redo the work differently, how another group might start over—the project-oriented
            awareness gives space for documentation to <quote>sunset</quote> the work. Whether or
            not students go on to use markup again after the course is over, they will have engaged
            with a powerful form of writing that marks up, investigates, curates, propagates, and
            conserves textual data. This is the very definition of a writing-intensive experience
            that is both professionalizing and cross-disciplinary in its reach. </para>

    </section>
    <section>
        <title>Coda: Teaching markup languages during a pandemic</title>
        <para>Teaching a writing-intensive course in markup modalities offers little distress for
            adaptation to a remote learning environment. In March 2020, when the author’s
            university (then the University of Pittsburgh at Greensburg) closed the campus and moved
            all courses online, there was little difficulty in transferring learning materials to a
            new format because we had already been relying on tutorials and assignments we had
            written and posted on the web, but more importantly because we had already developed a
            sense of community in the forms of asynchronous conversation cultivated not in the
            learning management system but rather in GitHub and on Slack. Prior to the pandemic
            quarantine, during January and February project teams already had developed asynchronous
            connections, reinforced by their own emojis (a rubber duck meme associated with rubber
            duck debugging, for example). The coding class might properly be recognized as
                <quote>flipped</quote>, in which most of the learning was already taking place in an
            applied context outside of class, while student and faculty class meetings reviewed
            content all together, to learn how to interact with an unfamiliar interface or to review
            issues students are having or help address something that is not working. It was easy to
            continue the management of a course based on markup technologies in which students had
            been trained to work with project management tools and to be writing and sharing their
            documentation in GitHub repositories and over Slack channels. We did miss the in-person
            interaction on which this class relied, with instructors able to look over the shoulders
            of students to help resolve a problem on their computers. Synchronous virtual meetings
            could not replace this, but using screen captures in asynchronous chat became more
            necessary, and students are certainly challenged to verbalize things that are not
            working properly when an instructor cannot come around behind the student’s computer to see what is
            going wrong. But adding comments to code stored in the class’s shared eXist-dB XML database and their project GitHub repositories
            continued as it had from the beginning of the semester. Because this class had cultivated tools to be able to
            communicate and work together online, they were perhaps less challenged and more bonded virtually than
            students in the courses managed only within the learning management system. Build teams
            of developers in a class, and a pandemic may slow but not stop them. In the pandemic crisis of 2020
            the writing intensive nature of shared project development seemed especially beneficial in
            supporting our hive of student coders.</para>
    </section>

</article>
