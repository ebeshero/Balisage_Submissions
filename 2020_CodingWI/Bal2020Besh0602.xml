<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="balisage-1-3.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?>
<?xml-model href="balisage-1-3.rng" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<?xml-stylesheet type="text/xsl" href="balisage-proceedings-html.xsl"?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
    version="5.0-subset Balisage-1.3">

    <title>Text Encoding and Literate Programming for a University Writing Intensive Course</title>
   <!-- <subtitle></subtitle>-->
    <info>
        <abstract>
            <para>Can learning text encoding and markup languages constitute a <quote>writing
                    intensive</quote> experience for university students? The author is developing a
                Text Encoding Fundamentals course with emphasis on text encoding as writing, as well
                as a proposal that this fulfill a major state university requirement of a
                research-oriented 300-level <quote>writing intensive</quote> or <quote>W</quote>
                course for undergraduate students. The course is specifically
                designed for those pursuing a Digital Media, Arts, and Technology major but must
                also be available to others in related disciplines as an experience in <quote>writing across the curriculum</quote>. While we may be familiar with
                arguments that coding and programming are a kind of literacy, the idea that
                developing projects with markup technologies may constitute an
                    <emphasis>intensive</emphasis> writing experience is less familiar. The
                consideration of text encoding as writing intensive may establish a call for
                teaching markup technologies more widely in a cross-disciplinary context.</para>
            <para>Not just any course introducing students to markup should be considered writing
                intensive. Arguably, a class that involves tagging exercises without project
                development and invites students to write reflectively about the experience is not
                engaging in an <emphasis>intensive</emphasis> way with the writing work we associate
                with coding in a project development context. This paper argues that a
                    <emphasis>writing intensive</emphasis> course in coding should take seriously
                the notion that coding and programming is a writing process that requires research
                and citation, algorithmic problem-solving and decision making, task management to
                organize a project team, and documentation to share the work and help others to
                build upon it. A course offering such experiences should, finally, be accessible to
                students from several disciplines, whether to a junior year English or history major
                with little to no programming experience, or a junior year computer science or
                information technology major with an interest in applied programming, unused to
                research questions that drive humanities scholarship. In presenting its case, this
                paper responds to a range of literature to evaluate the relationships among
                    <emphasis>encoding</emphasis>, <emphasis>coding</emphasis>,
                    <emphasis>programming</emphasis>, and <emphasis>writing</emphasis>.</para>
        </abstract>
        <author>
            <personname>
                <firstname>Elisa</firstname>
                <othername>E.</othername>
                <surname>Beshero-Bondar</surname>
            </personname>
            <personblurb>
                <para>Elisa Beshero-Bondar is a member of the TEI Technical Council, as well as Professor of Digital Humanities and Program Chair of Digital Media, Arts, and Technology at Penn State Erie, the Behrend College. Until June 2020, she was a professor of English Literature and Director of the Center for the Digital Text at Pitt-Greensburg which has featured a markup languages as a foundation of a curriculum in Digital Studies. Her projects investigate complex texts such as epics, plays, and multi-volume voyage logs, and involve her in experimentations with the TEI, including refining methods for computer-assisted collation of editions and probing questions of interoperability to reconcile diplomatic and critical edition encodings. She is the founder and organizer of the <link xlink:href="http://digitalmitford.org">Digital Mitford project</link> and <link xlink:href="https://digitalmitford.github.io/DigMitCS/">its usually annual coding school</link>. Her ongoing adventures with markup technologies are documented on <link xlink:href="http://newtfire.org">her development site at newtfire.org</link>. </para>
            </personblurb>
            <affiliation>
                <jobtitle>Professor of Digital Humanities</jobtitle>
                <jobtitle>Program Chair of Digital Media, Arts, and Technology</jobtitle>
                <orgname>Penn State Erie, the Behrend College</orgname>
            </affiliation>
            <email>eeb4@psu.edu</email>
        </author>
        <keywordset role="author">
            <keyword>markup</keyword>
            <keyword>writing intensive</keyword>
            <keyword>literate programming</keyword>
            <keyword>interchange</keyword>
            <keyword>code literacy</keyword>
            <keyword>general education requirement</keyword>
            <keyword>pedagogy</keyword>
            <keyword>coding across the curriculum</keyword>
            <keyword>Text Encoding Initiative</keyword>
            <keyword>TEI XML</keyword>
            <keyword>Relax NG</keyword>
            <keyword>XML family of languages</keyword>
            <keyword>XPath</keyword>
            <keyword>XSLT</keyword>
            <keyword>HTML</keyword>
        </keywordset>
    </info>
    <section>
        <title>Coding literacy as a writing modality</title>
        <para>To any academic who remembers the exhilaration in the 1990s of navigating around an Andrew File System and posting on it a <quote>paperless syllabus</quote> in a markup language, the application of the phrase <quote>teaching with technology</quote> in the university
            discourse of the 2010s may have a jarring sound. Scholarly markup geeks
            from a past century have lived to see <quote>technology</quote> for education be
            packaged in learning management systems that securely take care of all of our
            electronic interactions with students from posting announcements to grades. Even for 90s markup geeks, learning our way around the
            technologies driving Blackboard and Canvas can be abstruse and fretfully time-consuming,
            especially when we attempt applying their byzantine integrations with various proprietary software applications like Zoom or Panopto. Publications supporting
            educational technology innovations make evident that educational software applications are universally expected to
            be integrated and accessed from within a learning management system (LMS). For example, Hypothes.is, an
            open-source technology for web annotation is now packaged and funneled into an LMS with
            a proprietary gradebook integration, or faculty may not be aware of its existence or
            understand how to apply it in their courses.<footnote>
                <para>On the day of this writing, 12 April 2020, the <link
                        xlink:href="https://web.hypothes.is/">https://web.hypothes.is/</link>
                    promotes its proprietary LMS integration over its always free web service.
                    Nevertheless, a paid-for integration with an LMS is unnecessary to anyone with
                    access to a web browser and a capacity to follow clear and simple instructions
                    to create a public or private annotation group.</para>
            </footnote> A group of faculty from Seton Hall university found that <quote>teaching
                with technology, can be the way to bridge perceived differences between disciplines,
                especially at the developmental stages of a writing-across-the-curriculum
                program</quote>, and in their work to develop new technologically-enhanced courses,
            they concentrate on the interactive writing opportunities afforded by facultyâ€™s
            encounter with a university-wide investment in a learning management system.<footnote>
                <para>Kelly A. Shea, Mary McAleer Balkun, Susan A. Nolan, John T. Saccoman, and
                        Joyce Wright, <quote>One More Time: Transforming the Curriculum Across the
                            Disciplines Through Technology-Based Faculty Development and
                            Writing-Intensive Course Redesign</quote>
                        <emphasis role="ital">Across the Disciplines</emphasis> Volume 3
                    (2006) <link xlink:href="https://wac.colostate.edu/docs/atd/articles/shea2006.pdf">https://wac.colostate.edu/docs/atd/articles/shea2006.pdf</link> Accessed 25 April 2020.</para>
            </footnote> We now rely on markup-based management architectures that control university
            website delivery and our work in the <quote>technology</quote> of higher education is
            widely presumed to be about form-filling, at most using a limited tag set from a menu
            system. We have been acculturated to expect that composition and digital media classes like <quote>Writing for the
                Web</quote> are and <emphasis>should be</emphasis> about writing in Wordpress
            templates that provide carefully constrained and little-investigated access to the code
            layer. <quote>We do not ride on the railroad; it rides upon us,</quote> wrote Henry
            David Thoreau, and we might as well update that for todayâ€™s university: content
            management systems organize us, we do not organize them.<footnote>
                <para>Henry David Thoreau, <quote>Where I lived and what I lived for</quote>
                    <emphasis role="ital">Walden: A Fluid-Text Edition. Digital Thoreau.</emphasis>
                    Version A (1847), para 17, <link
                        xlink:href="http://digitalthoreau.org/fluid-text-toc"
                        >http://digitalthoreau.org/fluid-text-toc</link>. Accessed
                    2020-04-12.</para>
            </footnote>
        </para>
        <para>Although we have little practical choice but to commit to developing course materials in frameworks that we do not choose for ourselves, those frameworks (e.g. Blackboard, Moodle, Canvas) are built from XML building blocks which the savvy customer can occasionally learn about to try to modify parts of the system permissible to access. <footnote><para>See, for example, <link xlink:href="https://scholarlms.net/moodle-xml-format/">the documentation of Moodle XML format for quizzes</link>.</para></footnote>. XML establishes the context of educational technology in our educational institutions, but the way in which we access it is carefully gated in ways that benefit us but also relegate the technology under the hood to the level of the abstruse and esoteric. Those of us who build projects with markup and teach students to work with them are few in number, but we are the ones who are aware of the rapid fluency that people can gain when they learn to build and develop with XML. We understand that the XML markup and its family of languages itself has not become more abstruse or difficult to learn, but rather that this learning has been cultivated too narrowly to be recognized as a general skillset to cultivate. Yet given universitiesâ€™ deep investment in XML-based ecosystems, can we imagine a widely-accessible cross-disciplinary course that inverts the relationship between code and form-box, that engages students and faculty in organizing ideas with markup languages that they themselves control? This paper argues that a sustained learning and application of markup technologies, not as implicit structure, but as explicit document data modeling and development, should serve as a broadly accessible cross-disciplinary writing-intensive experience in its own right. And that this exploration should open doors to students who would otherwise not consider themselves <quote>tech savvy</quote> or capable programmers.</para>
        <para>In awakening students to the technologies that shape composition, classes that teach
                <quote>digital writing modalities</quote> (or composition that involves multiple
            media forms) may provide faculty markup practitioners a well-established and widely
            lauded context for teaching markup languages in a writing-intensive way. For writing
            instructors, <quote>digital writing modalities</quote> or <quote>multimodal
                writing</quote> can motivate dialogue about the medium as the message and the choice
            of form following function and audience. Addressing recent trends to assign student
            writing compositions in digital modalities such as audio and video, Laura Giovanelli and
            Molly Keener observe that <quote>Well-designed pedagogy recognizes multimodal writingâ€™s
                potential to foster student agency and ownership as increasingly participatory
                citizens where literacy means composing in a range of print and digital media,
                genres, and modes, where students are consumers <emphasis>and</emphasis> ethical
                creators.</quote>
            <footnote>
                <para>Laura Giovanelli and Molly Keener, <quote>How to talk about copyright so kids
                        will listen, and how to listen about copyright so kids will talk</quote> in
                    Grace Veach, <emphasis role="ital">Teachingâ€‹ Information Literacy and Writing
                        Studies: Volume 2, Upper-Level and Graduate Courses</emphasis> (Purdue
                    University Press, 2019-01-15), 225. ProQuest ebook.
                    <!--http://ebookcentral.proquest.com/lib/pitt-ebooks/reader.action?docID=5717973--></para>
            </footnote> Writing with markup languages can easily be taught in the context of digital
            multimodal composition that fosters student agency and ownership of the code base. Much
            as students compose by remixing and ironically applying visual or auditory memes, they
            might apply markup languages to compose by self-consciously reordering scripts of
            official documents and develop controlled vocabularies that help communities access
            their heritage.<footnote>
                <para>A good example of such application of markup languages is <link
                        xlink:href="https://dhtraining.org/hilt/course/introduction-to-the-text-encoding-initiative-tei-for-black-digital-humanities/"
                        >Jessica Luâ€™s and Caitlin Pollockâ€™s 2019 HILT course, <quote>Introduction to
                            the Text Encoding Initiative (TEI) for Black Digital
                        Humanities</quote></link> which organized training in markup to support
                        <quote>new ways of accessing, reading, sharing, and analyzing texts of
                        marginalized people</quote>.</para>
            </footnote> Semester-long XML-based writing-intensive courses want access to a
            good syntax-checking code editor (like the oXygen XML editor), writeable web space with
            secure FTP access, and possibly an XML database (like eXist-dB) and a GitHub account,
            instead of, perhaps, the more ubiquitous Wordpress account and the Adobe suite as the studentsâ€™ multimodal writing
           desk. While I do not expect every digital composition instructor to flock to
            these technologies (though I wish they might), I do anticipate that those of us faculty who can teach the XML
            family of languages can do so in a way that constitutes a writing-intensive experience
            valuable to students across the curriculum, and especially valuable in programs with
            majors, minors, and certificate programs supporting the digital humanities.</para>
        <para>Perhaps the most significant university context supporting university-wide
            interdisciplinary pedagogy in coding and programming, and thereby markup languages and
            their applications, is the call for <quote>coding across the curriculum</quote>, which sometimes explores the intersections between writing and coding, seeing both as a foundation for literacy in the twenty-first century. Programming, as Annette Vee notes, is sometimes described as a specifically actionable kind of language, or a langauge that combines both actions and descriptions, and in this she finds parallels in Kenneth Burkeâ€™s speech-act theory of human expression as performative. Vee finds that coding and programming to be a distinctly machine-actionable kind of writing in a language shared by human communities that support it:
          <blockquote><para>Since the advent of text-based programming languages, code is a form of
            writing as well as an enactment of procedures. Now that most of our writing is done with computational devices, it is no longer possible to fully extricate writing from programming, just as it is impossible to untangle
            writing from speech, or literacy from orality. Exploring the nature of
            language, action, and expression through programming allows us to think
            about the relationship between writing and speech differently and also to
            consider the ways in which technologies can combine with and foster
            human abilities. Computational and textual literacy are not simply parallel
            abilities, but intersectional, part of a new and larger version of literacy.<footnote><para> Vee, Annette, <emphasis role="ital">Coding Literacy: How Computer Programming Is Changing Writing</emphasis>
                The MIT Press, 2017. <link xlink:href="doi:10.2307/j.ctt1s476xn">https://www.jstor.org/stable/j.ctt1s476xn</link>. Accessed 14 Apr. 2020.</para> </footnote></para></blockquote>
           When coding is understood as literacy, its nexus with writing becomes explicit when we think of it on the same terms as developing language skills. Coding should be as ubiquitous and familiar to students as the writing they have been learning since childhood. Coding does not belong to computer science departments any more than writing belongs to English departments, as David J. Birnbaum and Alison Langmead make explicit:
            <blockquote><para>The first step toward learning to code is to recognize that computer programming is
                not computer science; it is more like writing. Everyone can learn to do it, and can
                be given the opportunity to learn to do it in ways that are appropriate for their
                disciplines. We offer humanists years of practice in learning to write; let us give
                them the chance also to learn to code. The second step is to recognize that learning a
                programming language is like learning a foreign language, except that it is much
                easier.<footnote><para> David J. Birnbaum and Alison Langmead, <quote>Task-Driven Programming Pedagogy in the Digital Humanities</quote> in <emphasis role="ital">New Directions for Computing Education: Embedding Computing Across Disciplines</emphasis>, ed. Samuel B. Fee, Amanda M. Holland-Minkley, and Thomas E. Lombardi (Springer International Publishing, 2017) 76.</para></footnote></para></blockquote>
          These are analogies to learning to write or learning a foreign language, intended to persuade humanists to adopt coding into their disciplines, but the analogies do not in themselves constitute an argument for coding and programming as potentially an intensive professional writing experience for students of any discipline.</para>
        <para>From <quote>outside</quote> the humanities, that is, from the context of programming education, Felienne Hermans and Marlies Aldewereld propose that more students would be interested in computer science if they learned to program in a way that followed models for learning to write. They suggest that programming instruction would be improved if it adapted the way writing instructors model examples of their writing process for students to break it down into discrete tasks more efficiently. They cite a study in which the elementary students comprehended scientific concepts better when they were assigned short writing assignments that engaged the topic. The suggestion that writing reflectively and observantly, and understanding a context for a program to be working makes the material more widely accessible and <quote>could help a broader group of kids identify as programmers!</quote><footnote><para>â€¨Felienne Hermans and Marlies Aldewereld, <quote>Programming is Writing is Programming</quote> <emphasis role="ital">Programming '17: Companion to the first International Conference on the Art, Science and Engineering of Programming</emphasis> No.33 (April 2017) 1-8; 7. <link xlink:href="https://dl.acm.org/doi/pdf/10.1145/3079368.3079413">https://dl.acm.org/doi/pdf/10.1145/3079368.3079413</link>.</para></footnote> Indeed, this emphasis on writing to learn a science enacts a return to an earlier and more integrated approach to education, before the <quote>sciences</quote> had become formally distinct from <quote>humanities</quote>: the late eighteenth century saw the scientific poems of Erasmus Darwin and calls for poetry that would bring zoology and botany to life and encourage sympathy with the natural world.<footnote><para>For context, see Sharon Ruston, <quote>The Application of Natural History to Poetry</quote> <emphasis role="ital">Literature and Science Hub</emphasis> University of Liverpool. <link xlink:href="https://www.liverpool.ac.uk/literature-and-science/essays/ruston_hist/">https://www.liverpool.ac.uk/literature-and-science/essays/ruston_hist/</link>. Accessed 14 April 2020. </para></footnote> We have known that the act of writing enhances learning in across disciplines for a long time now. But futher, as Hermans and Alderweld point out, the way writing instruction proceeds by providing model examples and activities that hone observation skills is exactly what can help students to learn programming.</para>
        <para>It is probably no coincidence that Donald Knuth modeled his concept of <quote>literate programming</quote> with programming for document formatting in the 1980s. In this context the programming of a machine to format electronic documents unites fundamentally with the action and reproduction of writing. Knuthâ€™s now-familiar concept seems simple in hindsight: <quote>Instead of imagining that our main task is to instruct a computer what to do, let us concentrate rather on explaining to human beings what we want a computer to do.</quote><footnote><para>Donald Knuth, <quote>Literate Programming</quote>, <emphasis role="ital">The Computer Journal</emphasis> 27:2 (1984) 97-111, 97. <link xlink:href="https://doi.org/10.1093/comjnl/27.2.97">https://doi.org/10.1093/comjnl/27.2.97</link>. Accessed 25 April 2020.</para></footnote> Knuthâ€™s way of writing about literate programming heightens an old association of verbal text with fabric textile with his concepts of <emphasis>weave</emphasis> and <emphasis>tangle</emphasis>: <blockquote><para>One line of processing is called <emphasis role="ital">weaving</emphasis> the web; it produces a document that describes the program clearly and that facilitates program maintenance. The other line of processing is called <emphasis role="ital">tangling</emphasis> the web; it produces a machine-executable program. The program and its documentation are both generated from the same source, so they are consistent with each other.<footnote><para>Knuth 2.</para></footnote></para></blockquote>. Literate programming became paradigmatic for the the XML family of languages by the turn of the new millenium. In 2002 Norm Walsh modeled its application to the DocBook XSLT stylesheets by applying namespaces to permit the tangling of actionable code with documentation.<footnote><para>Norman Walsh, <quote>Literate Programming in XML</quote> presented at <emphasis role="ital">XML 2002</emphasis>, 15 October 2002. <link xlink:href="https://nwalsh.com/docs/articles/xml2002/lp/paper.html">https://nwalsh.com/docs/articles/xml2002/lp/paper.html</link> Accessed 25 April 2020.</para></footnote>. And over the course of its development from the early 1990s onward, the One-Document-Does-It-All (ODD) system represents a path-breaking example of literate programming for the purpose of compiling and delivering the Guidelines of the Text Encoding Initiative (TEI) as a combination of documentation and processing code instantiating the schema rules of the community-maintained XML vocabulary.<footnote><para>Sebastian Rahtz and Lou Burnard, <quote>Reviewing the TEI ODD System</quote> <emphasis role="ital">DocEng â€™13: Proceedings of the 2013 ACM symposium on document engineering</emphasis>, September 2013, 193-196. <link xlink:href="https://doi.org/10.1145/2494266.2494321">https://doi.org/10.1145/2494266.2494321</link> Accessed 25 April 2020.</para></footnote>    
</para>
    </section>
    <section>
        <title>Writing intensively and across the curriculum with markup languages</title>
        <para>The XML family of languages were designed not only to be widely accessible, but also were designed to be a vocabulary the writer controls or consults or interacts with, and requires a hierarchical structuring. It does not take very long to acquaint new coders to the rules of how to tag a document, or how to turn a <quote>plain text</quote> document into an XML document, though often people experience a little frustration with typing in the attributes or figuring what they can do with attributes. The first week or two of a class that involves markup methods can orient people to how to code something in XML, but the interesting experience of that can be when we ask students to develop their own hierarchies to organize what they are reading, and when we invite our students to try to recognize what is implicit, and find ways to use elements, attributes, or comments to make that explicit. The act of inscribing markup has been recognized (CITE KATE SINGER) as a writing process, but if it goes no further than an exercise in tagging, perhaps we should consider this something like writing a reflective paper, a response that sharpens oneâ€™s observation and critical thinking skills. In my years of teaching undergraduates to code, I notice in the first couple of weeks that certain students have difficulties with conceptualizing dependencies, or what the relationship between an element and an attribute and its value ought to be. They sometimes prepare shallow hierarchies, and instead of bundling list items together in a cluster, make a very flat tree where every line is its own entry. These students benefit from seeing more detailed markup, and also from understanding something about how the markup may be processed, how it can be used to organize and access particular kinds of information. For that reason, I have found that inviting my students to write their first markup on a recipe, one that contains an interesting variety of ingredients, measurement units, and activities, provides a very clear and easily recognizable sense of structure with lots of categories of information. [CITE Newtfire XML EX 1] So, too, does a poem, or a piece of historical correspondence. Students who have difficulty constructing dependent clauses may find the preparation of an informative, non-redundant hierarchy just as challenging. Quite frequently student beginners will take the text content of a document and repeat it in an attribute value, as for example wrapping code around a name as given in a text, and using that name in an attribute value on the element, until they receive some suggestions that they might want to use the attribute as a key for a standard identifier whenever this individual is mentioned by their various names.</para>
  <para>Learning to code the XML syntax is easy. Learning to optimize oneâ€™s preparation of XML takes a long time, takes practice, and takes application, just like learning to write good sentences and paragraphs, and learning to develop a research paper or a thesis. Just like these progressively more complex writing activities, we can identify levels of intensity in increasing applications of markup technologies, and the challenges to the thinking and communication process are remarkably similar. The increasing intensity is not simply due to learning new technologies, but rather becomes gradually more intensive in cognitive ways. The process of becoming a better reader and writer and coder and developer is also the process of becoming more adept in organizing and processing information. Writing may be easily recognizable in the practice we call mere tagging in first-time coders, but the way one becomes a better writer with markup is by learning what can be done with and made from the markup. The processes of navigating, extracting, transforming, and remixing data marked in an XML tree define the <emphasis>intensive</emphasis>  part of the writing process. When students learn only tagging and do not learn how to parse their own code, they remain unaware of what the markup makes possible, and they may often be unaware of the problems imposed by imprecision and inconsistency. They may be tagging correctly, but not in a way that communicates meaningfully or reliably. Worse yet, in becoming aware of the human unreliabilities in applying markup, they may come away with the idea that the tree structures we create are arbitrary, exert an aggressive control over a document. [CITE] This line of thinking relies on an unsustained, non-intensive engagement with marked documents and an unfortunate separation of the technologies of managing and processing XML from instruction in markup.</para>      
  <para>Just as we think of free-writing as a valuable exercise to start a first preliminary draft in a composition class, in teaching markup, a certain amount of mess and unreliability is okay as we are learning or figuring out what matters to prioritize. Often new coders introduce far more differently named elements than they really need, or that would be baffling to keep track of in a real-life project. To come to an understanding of how to code helpfully and meaningfully, a student needs to confront the problem of sharing and reproducibilityâ€”concepts parallel to the awareness of an audience emphasized in rhetoric and composition classes as a means to craft better sentences, to trim out verbosity.</para>       
   <para>Students often improve their markup dramatically when they learn to write Relax NG schema code, that creates rules for encoding. This may be a first data-modeling experience for students in a general education context, when they are called upon to think in a <quote>meta</quote> or higher order reflective way about formalizing their code, and making it possible for others to understand it and reproduce it.</para>       
        <para>
        (recipe coding)
        (recipe coding with a shared context)
        (designing a schema and of controlled vocabularies: within a project)
        (decision processes for controlled vocabularies with the TEI)
        
       DATA PREPARATION: 
       up-conversion with regular expressions: pattern recognition. Useful for all kinds of text analysis, as in stemming patterns for natural language processing. In XML, a power tool for preparing a large-sized corpus of documents. 
       
       
       XSLT: constructing templates and accounting for nodes. Deciding what can be ignored. Revisiting your decisions
        Push and pull processing
        
        XQUERY and persistent datatyping
        Encounters with marked up text get you someplace different than unmarked text, and give students a constructive experience with data curation and preparation. 
        CITE: Clifford Anderson's Balisage paper: On Teaching XQuery to Digital Humanists: <quote>XQuery makes it possible for students to become productive without having to learn as many computer science or software engineering concepts. A simple four or five line FLWOR expression can easily demonstrate the power of XQuery and provide a basis for students' tinkering and exploration.</quote> And, as Anderson affirms, it is part of a full stack development  http://www.balisage.net/Proceedings/vol13/html/Anderson01/BalisageVol13-Anderson01.html
        
      DOCUMENTATION and SHARING the work: establishing a context
      When students prepare a project in markup, they are not simply writing papers to be filed in a course-specific context. They are preparing a research site and their work can often be continued by them or others. Students can be building beyond the constraints of a single semester, and even if they are not tempted to return to the project, they can leave scaffolding behind for others to continue the work or alter its direction, or retrieve the files. Awareness of the potential energy of the work they are doing can give shape to an encounter with markup languages in the course of a semester. The energy input over a course of weeks puts emphasis on preparing material that others can read and reuse. Indeed, assignments for a writing intensive experience can be constructed with attention to:
      1) reading the code and documentation of other projects, and building on it
      2) preparing documentation meant to be read by peers and professor(s) working with you, and meant to be read by others who access your code from a repository. Such documentation may include:
        * Kanban board workflow management
        * README.md files
        * task lists and issues
        * being responsible and <quote>on-call</quote> for responding to questions and assisting your teammates
            
    These are activities to do with taking responsibility for method and processes, for managing the intellectual content of a project. Studying how copyright applies to code and markup and choosing a license for sharing the work should be part of this experience. 
    Giving students access to the full set of tools in the XML arsenal and establishing both immediate (in-semester) short-range and long-range possibilities for their work will introduce students from any background to the power of markup languages and with the experience of writing to form and connect with communities of practice. This cannot fail to be a professionalizing experience. Even in developing projects that are not successful, there will be opportunities to recognize in failures what to document, how to redo the work differently, how another group might start overâ€”the project-oriented awareness gives space for documentation to <quote>sunset</quote> the work. Whether or not students go on to use markup again after the course is over, they will have engaged with a powerful form of writing that marks up, investigates, curates, propagates, and conserves textual data. This is the very definition of a writing-intensive experience that is both professionalizing and cross-disciplinary in its reach. 

Monitoring git commit messages and documentation 
        
        (documentation, XML Comments, git commits, methodology pages, sharing the work with others)
        (research in the field: referencing is connecting and networking)
        

CUT: YOUR GOAL ISN'T TO MAKE EVERYBODY DO THIS, BUT JUST TO RECOGNIZE THAT WHEN IT IS TAUGHT IT OUGHT TO BE RECOGNIZED AND CREDITED AS WRITING INTENSIVE.
How hard is this for Humanities faculty to learn? 
Faculty workshops and training can provide it, but it is not often offered, and perhaps we need to overcome a presumption that faculty will not be interested in the material. Where do we markup practitioners imagine that we find an audience for instructional materials? Who should be learning these technologies? Can this be treated not <emphasis>only</emphasis> as a restricted technological preserve, but as an encounter with what digital texts can be made of, as a component of digital literacy for humanities faculty and graduate programs? Can we encourage and incentivize the learning, teaching, and sharing of these technologies? The author learned enough of a foundation in a range of languages in a 15-week semester thanks to the existence of a course taught by David J. Birnbaum in the University of Pittsburghâ€™s Honors College program CITE, and she learned alongside a group of undergraduates, working in teams on semester projects as described in this paper. While she took the course to learn how to develop a digital edition project, she exited with the basis for developing new courses and imagining new ways of working on projects with students. Other faculty at Pitt and Pitt-Greensburg have lit their torches from the same pedagogical fires, and we are aware of faculty at UVic, U of Maryland, Bucknell, and Vanderbilt (just to name a few) who teach humanities students to engage with a range of XML technologies. 

Teaching Markup Languages during a Pandemic
Teaching a writing-intensive course in markup modalities offers little distress for adaptation to a remote learning environment, as we had to do recently after the university closed down face-to-face classes. This kind of class works for connecting synchronously OR asynchronously. It was much easier to continue the management of a course based on markup technologies in which students had been trained to work with project management tools and to be writing and sharing their documentation in GitHub repositories and over Slack channels than to retool one in which in-class daily discussion and traditional kinds of assignments prevailed. The digital modalities organizing our class were lively enough that the coding class might properly be recognized as <quote>flipped</quote>, in which most of the learning was already taking place in an applied context outside of class, while student and faculty class meetings reviewed content all together, to learn how to interact with an unfamiliar interface or to review issues students are having or help address something that is not working. 
        </para>
    </section>

</article>
