<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="balisage-1-3.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?>
<?xml-model href="balisage-1-3.rng" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<?xml-stylesheet type="text/xsl" href="balisage-proceedings-html.xsl"?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
    version="5.0-subset Balisage-1.3">

    <title>Text Encoding and Processing as a University Writing Intensive Course</title>
    <!-- <subtitle></subtitle>-->
    <info>
        <abstract>
            <para>Can learning text encoding and markup languages constitute a <quote>writing
                    intensive</quote> experience for university students? Having taught students with a range of majors from humanities to computer science to 
                build web-based research projects with the the XML family of languages, the author is developing a
                Text Encoding Fundamentals course with emphasis on text encoding as writing, as well
                as a proposal that this fulfill a major state university requirement of a
                research-oriented <quote>writing intensive</quote> course for
                undergraduate students to fulfill a requirement in <quote>writing across the curriculum</quote>. 
                While we may be familiar with arguments that coding and
                programming are a kind of literacy, the idea that developing projects with markup
                technologies may constitute an <emphasis>intensive</emphasis> writing experience is
                less familiar. The consideration of text encoding as writing intensive may establish
                a call for teaching markup technologies more widely in a cross-disciplinary
                context.</para>
            <para>Not just any course introducing students to markup should be considered writing
                intensive. Arguably, a class that involves tagging exercises without project
                development and invites students to write reflectively about the experience is not
                engaging in an <emphasis>intensive</emphasis> way with the writing work we associate
                with coding in a project development context. This paper argues that a
                    <emphasis>writing intensive</emphasis> course involving the XML family of languages should engage a writing process that requires research
                and citation, algorithmic problem-solving and decision making, task management, and
                documentation to share the work and help others to build upon it. A course offering
                such experiences should be accessible to students from several
                disciplines, whether to a junior year English or history major with little to no
                programming experience, or a junior year computer science or information technology
                major with an interest in applied programming, unused to research questions that
                drive humanities scholarship. In presenting its case, this paper explores a range of
                literature to locate intersections between digital writing modalities discussed in
                the context of composition courses and the concept of literate programming that
                grounds the XML family of languages.</para>
        </abstract>
        <author>
            <personname>
                <firstname>Elisa</firstname>
                <othername>E.</othername>
                <surname>Beshero-Bondar</surname>
            </personname>
            <personblurb>
                <para>Elisa Beshero-Bondar is a member of the TEI Technical Council, as well as
                    Professor of Digital Humanities and Program Chair of Digital Media, Arts, and
                    Technology at Penn State Erie, the Behrend College. Until June 2020, she was a
                    professor of English Literature and Director of the Center for the Digital Text
                    at Pitt-Greensburg which has featured markup languages as a foundation of a
                    curriculum in Digital Studies. Her projects involve her in experimentations with
                    the TEI, including refining methods for computer-assisted collation of editions
                    and probing questions of interoperability to reconcile diplomatic and critical
                    edition encodings, as with the <link
                        xlink:href="https://frankensteinvariorum.github.io/viewer/">Frankenstein
                        Variorum</link>. She is the founder and organizer of the <link
                        xlink:href="http://digitalmitford.org">Digital Mitford project</link> and
                        <link xlink:href="https://digitalmitford.github.io/DigMitCS/">its usually
                        annual coding school</link>. Her ongoing adventures with markup technologies
                    are documented on <link xlink:href="http://newtfire.org">her development site at
                        newtfire.org</link>. </para>
            </personblurb>
            <affiliation>
                <jobtitle>Professor of Digital Humanities</jobtitle>
                <jobtitle>Program Chair of Digital Media, Arts, and Technology</jobtitle>
                <orgname>Penn State Erie, the Behrend College</orgname>
            </affiliation>
            <email>eeb4@psu.edu</email>
        </author>
        <keywordset role="author">
            <keyword>markup</keyword>
            <keyword>writing intensive</keyword>
            <keyword>literate programming</keyword>
            <keyword>interchange</keyword>
            <keyword>code literacy</keyword>
            <keyword>general education requirement</keyword>
            <keyword>pedagogy</keyword>
            <keyword>writing across the curriculum</keyword>
            <keyword>coding across the curriculum</keyword>
            <keyword>Text Encoding Initiative</keyword>
            <keyword>TEI XML</keyword>
            <keyword>Relax NG</keyword>
            <keyword>XML family of languages</keyword>
            <keyword>XPath</keyword>
            <keyword>XSLT</keyword>
            <keyword>HTML</keyword>
        </keywordset>
    </info>
    <section>
        <title>Coding literacy as a writing modality</title>
        <para>To any academic who remembers the exhilaration in the 1990s of navigating around an
            Andrew File System and posting on it a <quote>paperless syllabus</quote> in HTML, the
            application of the phrase <quote>teaching with technology</quote> in the university
            discourse of the 2010s may have a jarring sound. Scholarly markup geeks from a past
            century have lived to see <quote>technology</quote> for education be packaged in
            learning management systems that securely take care of all of our electronic
            interactions with students from posting announcements to grades. Even for 90s markup
            geeks, learning our way around the technologies driving Blackboard and Canvas can be
            abstruse and fretfully time-consuming, especially when we attempt applying their
            byzantine integrations with various proprietary software applications like Zoom or
            Panopto. Publications supporting educational technology innovations make evident that
            educational software applications are universally expected to be integrated and accessed
            from within a learning management system (LMS). For example, Hypothes.is, an open-source
            technology for web annotation is now packaged and funneled into an LMS with a
            proprietary gradebook integration, without which faculty may not be aware of its
            existence or understand how to apply it in their courses.<footnote>
                <para>On the day of this writing, 5 July 2020, the <link
                        xlink:href="https://web.hypothes.is/">https://web.hypothes.is/</link>
                    promotes its proprietary LMS integration over its always free web service.
                    Nevertheless, a paid-for integration with an LMS is unnecessary to anyone with
                    access to a web browser and a capacity to follow clear and simple instructions
                    to create a public or private annotation group.</para>
            </footnote> A group of faculty from Seton Hall university found that <quote>teaching
                with technology, can be the way to bridge perceived differences between disciplines,
                especially at the developmental stages of a writing-across-the-curriculum
                program</quote>, and in their work to develop new technologically-enhanced courses,
            they concentrate on the interactive writing opportunities afforded by faculty’s
            encounter with a university-wide investment in a learning management system.<footnote>
                <para>Kelly A. Shea, Mary McAleer Balkun, Susan A. Nolan, John T. Saccoman, and
                    Joyce Wright, <quote>One More Time: Transforming the Curriculum Across the
                        Disciplines Through Technology-Based Faculty Development and
                        Writing-Intensive Course Redesign</quote>
                    <emphasis role="ital">Across the Disciplines</emphasis> Volume 3 (2006) <link
                        xlink:href="https://wac.colostate.edu/docs/atd/articles/shea2006.pdf"
                        >https://wac.colostate.edu/docs/atd/articles/shea2006.pdf</link> Accessed 25
                    April 2020.</para>
            </footnote> We now rely on markup-based management architectures that control university
            website delivery and our work in the <quote>technology</quote> of higher education is
            widely presumed to be about form-filling, at most using a limited tag set from a menu
            system. We have been acculturated to expect that composition and digital media classes
            like <quote>Writing for the Web</quote> are and <emphasis>should be</emphasis> about
            writing in Wordpress templates that provide carefully constrained and
            little-investigated access to the code layer. <quote>We do not ride on the railroad; it
                rides upon us,</quote> wrote Henry David Thoreau, and we might as well update that
            for today’s university content management systems: we do not direct the content
            management system, it directs us.<footnote>
                <para>Henry David Thoreau, <quote>Where I lived and what I lived for</quote>
                    <emphasis role="ital">Walden: A Fluid-Text Edition. Digital Thoreau.</emphasis>
                    Version A (1847), para 17, <link
                        xlink:href="http://digitalthoreau.org/fluid-text-toc"
                        >http://digitalthoreau.org/fluid-text-toc</link>. Accessed
                    2020-04-12.</para>
            </footnote>
        </para>
        <para>Although we have little practical choice but to commit to developing course materials
            in frameworks that we do not choose for ourselves, those frameworks (e.g. Blackboard,
            Moodle, Canvas) are built from XML building blocks which the savvy customer can
            occasionally learn about to try to modify parts of the system permissible to access. <footnote>
                <para>See, for example, <link xlink:href="https://scholarlms.net/moodle-xml-format/"
                        >the documentation of Moodle XML format for quizzes</link>.</para>
            </footnote> XML establishes the context of educational technology in our educational
            institutions, but our access is carefully gated in ways that relegate
            the technology under the hood to the level of the abstruse and esoteric. Those of us who
            teach students to write and build projects with markup technologies may be few in
            number, but we are the ones who are aware of the skills our students rapidly develop and
            hone over the course of a single semester—skills to build data models, search
            interfaces, and informational graphics according to their own design. Learning XML with
            its family of languages helps students to develop independently from <quote>black
                box</quote> software, and also helps make them informed consumers to choose the
            software they want to commit to particular tasks, to find the tools most amenable to
            user alterations <quote>under the hood</quote> and most friendly to transporting the
            data when the software does not last. Learning markup technologies is a way of learning
            the structures of the web of information, and much the way we learn the formal genre
            expectations of an essay or a poem, we learn formal ways of containing data and metadata
            in an XML framework driven by our interests in processing, sharing, accessing the data.
            We write documents to be read and acted upon by humans; and we write markup to be read
            and parsed and acted upon by humans and machines.</para>
        <para>XML markup and its family of languages itself has not become more abstruse or
            difficult to learn since the millenium. Indeed, instruction is much easier now with many
            tutorials available and more powerful processing methods available now.<footnote>
                <para>The author finds it is becoming easier to teach XPath, XSLT, and XQuery since
                    the introduction of XPath 3.0 and 3.1 with the simplicity of reading the
                    application of multiple functions using the simple map and arrow concatenator.
                    These have made it easier to follow a simple step-by-step thinking process in
                    chaining functions together. This improvement in XPath readability is a
                    refinement of our available writing instruments making them far more accessible
                    to new learners.</para>
            </footnote> However, the learning of markup technologies and the XML stack has been
            cultivated too narrowly to be recognized as a general skillset beneficial to students
            across disciplines. Given universities’ deep investment in XML-based ecosystems, can we
            imagine a widely-accessible cross-disciplinary course that inverts the relationship
            between code and form-box, that engages students and faculty in organizing ideas with
            markup languages that they themselves control? This paper argues that a sustained
            learning and application of markup technologies, not as implicit structure, but as
            explicit document data modeling and development, should serve as a broadly accessible
            cross-disciplinary writing-intensive experience in its own right. This exploration
            should open doors to students who would otherwise not consider themselves <quote>tech
                savvy</quote> or capable programmers.</para>
        <para>In awakening students to the technologies that shape composition, classes that teach
                <quote>digital writing modalities</quote> (or composition that involves multiple
            media forms) may provide faculty markup practitioners a well-established and widely
            lauded context for teaching markup languages in a writing-intensive way. For writing
            instructors, <quote>digital writing modalities</quote> or <quote>multimodal
                writing</quote> can motivate dialogue about the medium as the message and the choice
            of form following function and audience. Addressing recent trends to assign student
            writing compositions in digital modalities such as audio and video, Laura Giovanelli and
            Molly Keener observe that <quote>Well-designed pedagogy recognizes multimodal writing’s
                potential to foster student agency and ownership as increasingly participatory
                citizens where literacy means composing in a range of print and digital media,
                genres, and modes, where students are consumers <emphasis>and</emphasis> ethical
                creators.</quote>
            <footnote>
                <para>Laura Giovanelli and Molly Keener, <quote>How to talk about copyright so kids
                        will listen, and how to listen about copyright so kids will talk</quote> in
                    Grace Veach, <emphasis role="ital">Teaching​ Information Literacy and Writing
                        Studies: Volume 2, Upper-Level and Graduate Courses</emphasis> (Purdue
                    University Press, 2019-01-15), 225. ProQuest ebook.
                    <!--http://ebookcentral.proquest.com/lib/pitt-ebooks/reader.action?docID=5717973--></para>
            </footnote> Writing with markup languages can easily be taught in the context of digital
            multimodal composition that fosters student agency and ownership of the code base. Much
            as students compose by remixing and ironically applying visual or auditory memes, they
            might apply markup languages to compose by self-consciously reordering scripts of
            official documents and develop controlled vocabularies that help communities access
            their heritage.<footnote>
                <para>A good example of such application of markup languages is <link
                        xlink:href="https://dhtraining.org/hilt/course/introduction-to-the-text-encoding-initiative-tei-for-black-digital-humanities/"
                        >Jessica Lu’s and Caitlin Pollock’s 2019 HILT course, <quote>Introduction to
                            the Text Encoding Initiative (TEI) for Black Digital
                        Humanities</quote></link> which organized training in markup to support
                        <quote>new ways of accessing, reading, sharing, and analyzing texts of
                        marginalized people</quote>.</para>
            </footnote> Semester-long XML-based writing-intensive courses want access to a good
            syntax-checking code editor (like the oXygen XML editor), writeable web space with
            secure FTP access, and possibly an XML database (like eXist-dB) and a GitHub account,
            instead of, perhaps, the more ubiquitous Wordpress account and the Adobe suite as the
            students’ multimodal writing desk. While I do not expect every digital composition
            instructor to flock to these technologies (though I wish they might), I do anticipate
            that those of us faculty who can teach the XML family of languages can do so in a way
            that constitutes a writing-intensive experience valuable to students across the
            curriculum, and especially valuable in programs with majors, minors, and certificate
            programs supporting the digital humanities.</para>
        <para>Perhaps the most significant university context supporting university-wide
            interdisciplinary pedagogy in coding and programming, and thereby markup languages and
            their applications, is the call for <quote>coding across the curriculum</quote>, which
            sometimes explores the intersections between writing and coding, seeing both as a
            foundation for literacy in the twenty-first century. Programming is sometimes described
            as a specifically actionable kind of language, or a language that combines both actions
            and descriptions, and for this Annette Vee finds parallels in Kenneth Burke’s speech-act
            theory of human expression as performative. Vee finds that coding and programming to be
            a distinctly machine-actionable kind of writing in a language shared by human
            communities that support it: <blockquote>
                <para>Since the advent of text-based programming languages, code is a form of
                    writing as well as an enactment of procedures. Now that most of our writing is
                    done with computational devices, it is no longer possible to fully extricate
                    writing from programming, just as it is impossible to untangle writing from
                    speech, or literacy from orality. Exploring the nature of language, action, and
                    expression through programming allows us to think about the relationship between
                    writing and speech differently and also to consider the ways in which
                    technologies can combine with and foster human abilities. Computational and
                    textual literacy are not simply parallel abilities, but intersectional, part of
                    a new and larger version of literacy.<footnote>
                        <para> Vee, Annette, <emphasis role="ital">Coding Literacy: How Computer
                                Programming Is Changing Writing</emphasis> The MIT Press, 2017.
                                <link xlink:href="doi:10.2307/j.ctt1s476xn"
                                >https://www.jstor.org/stable/j.ctt1s476xn</link>. Accessed 14 Apr.
                            2020.</para>
                    </footnote></para>
            </blockquote> When coding is understood as literacy, its nexus with writing becomes
            explicit when we think of it on the same terms as developing language skills. Coding
            should be as ubiquitous and familiar to students as the writing they have been learning
            since childhood. Coding does not belong to computer science departments any more than
            writing belongs to English departments, as David J. Birnbaum and Alison Langmead make
            explicit: <blockquote>
                <para>The first step toward learning to code is to recognize that computer
                    programming is not computer science; it is more like writing. Everyone can learn
                    to do it, and can be given the opportunity to learn to do it in ways that are
                    appropriate for their disciplines. We offer humanists years of practice in
                    learning to write; let us give them the chance also to learn to code. The second
                    step is to recognize that learning a programming language is like learning a
                    foreign language, except that it is much easier.<footnote>
                        <para> David J. Birnbaum and Alison Langmead, <quote>Task-Driven Programming
                                Pedagogy in the Digital Humanities</quote> in <emphasis role="ital"
                                >New Directions for Computing Education: Embedding Computing Across
                                Disciplines</emphasis>, ed. Samuel B. Fee, Amanda M.
                            Holland-Minkley, and Thomas E. Lombardi (Springer International
                            Publishing, 2017) 76.</para>
                    </footnote></para>
            </blockquote> These are analogies to learning to write or learning a foreign language,
            intended to persuade humanists to adopt coding into their disciplines, but the analogies
            do not in themselves constitute an argument for coding and programming as potentially an
            intensive professional writing experience for students of any discipline.</para>
        <para>That argument for the writing-intensiveness of coding can be found
                <quote>outside</quote> the humanities. In the context of programming education,
            Felienne Hermans and Marlies Aldewereld propose that more students would be interested
            in computer science if they learned to program in a way that followed models for
            learning to write. They suggest that programming instruction would be improved if it
            adapted the way writing instructors model examples of their writing process for students
            to break it down into discrete tasks more efficiently. They cite a study in which the
            elementary students comprehended scientific concepts better when they were assigned
            short writing assignments that engaged the topic. The suggestion that writing
            reflectively and observantly, and understanding a context for a program to be working
            makes the material more widely accessible and <quote>could help a broader group of kids
                identify as programmers!</quote><footnote>
                <para> Felienne Hermans and Marlies Aldewereld, <quote>Programming is Writing is
                        Programming</quote>
                    <emphasis role="ital">Programming '17: Companion to the first International
                        Conference on the Art, Science and Engineering of Programming</emphasis>
                    No.33 (April 2017) 1-8; 7. <link
                        xlink:href="https://dl.acm.org/doi/pdf/10.1145/3079368.3079413"
                        >https://dl.acm.org/doi/pdf/10.1145/3079368.3079413</link>.</para>
            </footnote> Indeed, this emphasis on writing to learn a science enacts a return to an
            earlier and more integrated approach to education, before the <quote>sciences</quote>
            had become formally distinct from <quote>humanities</quote>: the late eighteenth century
            saw the scientific poems of Erasmus Darwin and calls for poetry that would bring zoology
            and botany to life and encourage sympathy with the natural world.<footnote>
                <para>For context, see Sharon Ruston, <quote>The Application of Natural History to
                        Poetry</quote>
                    <emphasis role="ital">Literature and Science Hub</emphasis> University of
                    Liverpool. <link
                        xlink:href="https://www.liverpool.ac.uk/literature-and-science/essays/ruston_hist/"
                        >https://www.liverpool.ac.uk/literature-and-science/essays/ruston_hist/</link>.
                    Accessed 14 April 2020. </para>
            </footnote> We have known that the act of writing enhances learning in across
            disciplines for a long time now. But futher, as Hermans and Alderweld point out,
            students can learn programming more easily if they are taught in the mode of writing
            instruction, with modeled examples and activities that hone observation skills.</para>
        <para>It is probably no coincidence that Donald Knuth modeled his concept of <quote>literate
                programming</quote> with programming for document formatting in the 1980s. In this
            context the programming of a machine to format electronic documents unites fundamentally
            with the action and reproduction of writing. Knuth’s now-familiar concept seems simple
            in hindsight: <quote>Instead of imagining that our main task is to instruct a computer
                what to do, let us concentrate rather on explaining to human beings what we want a
                computer to do.</quote><footnote>
                <para>Donald Knuth, <quote>Literate Programming</quote>, <emphasis role="ital">The
                        Computer Journal</emphasis> 27:2 (1984) 97-111, 97. <link
                        xlink:href="https://doi.org/10.1093/comjnl/27.2.97"
                        >https://doi.org/10.1093/comjnl/27.2.97</link>. Accessed 25 April
                    2020.</para>
            </footnote> The process of literate programming heightens an old association of verbal
            text with fabric textile, applying Knuth’s concepts of <emphasis>weave</emphasis> and
                <emphasis>tangle</emphasis>: <blockquote>
                <para>One line of processing is called <emphasis role="ital">weaving</emphasis> the
                    web; it produces a document that describes the program clearly and that
                    facilitates program maintenance. The other line of processing is called
                        <emphasis role="ital">tangling</emphasis> the web; it produces a
                    machine-executable program. The program and its documentation are both generated
                    from the same source, so they are consistent with each other.<footnote>
                        <para>Knuth 2.</para>
                    </footnote></para>
            </blockquote> Literate programming became paradigmatic for the the XML family of
            languages by the turn of the new millenium. In 2002 Norm Walsh modeled its application
            to the DocBook XSLT stylesheets by applying namespaces to permit the tangling of
            actionable code with documentation.<footnote>
                <para>Norman Walsh, <quote>Literate Programming in XML</quote> presented at
                        <emphasis role="ital">XML 2002</emphasis>, 15 October 2002. <link
                        xlink:href="https://nwalsh.com/docs/articles/xml2002/lp/paper.html"
                        >https://nwalsh.com/docs/articles/xml2002/lp/paper.html</link> Accessed 25
                    April 2020.</para>
            </footnote>. And over the course of its development from the early 1990s onward, the
            One-Document-Does-It-All (ODD) system represents a path-breaking example of literate
            programming for the purpose of compiling and delivering the Guidelines of the Text
            Encoding Initiative (TEI) as a combination of documentation and processing code
            instantiating the schema rules of the community-maintained XML vocabulary.<footnote>
                <para>Sebastian Rahtz and Lou Burnard, <quote>Reviewing the TEI ODD System</quote>
                    <emphasis role="ital">DocEng ’13: Proceedings of the 2013 ACM symposium on
                        document engineering</emphasis>, September 2013, 193-196. <link
                        xlink:href="https://doi.org/10.1145/2494266.2494321"
                        >https://doi.org/10.1145/2494266.2494321</link> Accessed 25 April
                    2020.</para>
            </footnote> With its deep investment in literate programming, the XML family of
            languages should be understood to be perhaps the most thoroughly invested in writing
            processes. Taken together, tangling and weaving in the development of markup projects
            should be understood across the university as a writing intensive experience, worthy of
            incorporation in the curriculum as such.</para>
    </section>
    <section>
        <title>Writing intensively is coding for interchange</title>
        <para>The aspect of XML encoding that makes it so problematic or impossible for
            interoperational processing (even within a shared vocabulary like the TEI) is the
            semantic naming of tags, what Desmond Schmidt has called its
                    <quote><emphasis>illocutionary force</emphasis></quote>.<footnote>
                <para>Desmond Schmidt, <quote>Towards an Interoperable Digital Scholarly
                        Edition</quote>, <emphasis role="ital">Journal of the Text Encoding
                        Initiative</emphasis> Issue , November 2014. <link
                        xlink:href="https://journals.openedition.org/jtei/979"
                        >https://journals.openedition.org/jtei/979</link>. Accessed 28 April
                    2020.</para>
            </footnote> This trouble for universalized processing is one of the aspects of XML that
            makes it writerly and scholarly in nature, and gives it power as a research tool when
            student writers learn not just how to tag but also how to manage and process their
            tagging as a controlled system. Confronting the challenge of processing the markup and
            sharing it with others outside one’s discourse community (oneself, one’s team, or one’s
            semester class) is what this section designates as <emphasis>intensive</emphasis> about
            a course in writing with markup. An introductory writing experience with markup
            languages may familiarize students with the data structure and well-formedness and some
            of the issues of transformation and sharing the data, but intensification of the writing
            challenge begins with confronting the management issues of writing a customization and
            designing schema validation rules. Still more intensification is applied when students
            learn how they can navigate and process the markup data.</para>
        <para>This issue with writerly nature of XML coding and processing is not well appreciated
            in the larger context of digital humanities work or the developers that surround it,
            eager to facilitate the publication process and separate it from the markup practice.
            There is a certain impatience manifested in the writings of developers who want to
            federate and universalize web interfaces for transforming all bibliographic citations
            coded in TEI, and finding this difficult or time-consuming because of distinct
            interpretations of a coding vocabulary, proclaim the TEI itself to be the problem, as
            Desmond Schmidt has done, for permitting all-in-one incorporation of metadata and
            interpretation with the data of a text. Schmidt concludes that TEI is out of sync with
            the web of data: <quote>This document-centric nature of TEI contrasts with the modern
                data-centric world, where the focus is much more on connecting relatively smaller
                chunks of data (Berners-Lee 2006).</quote><footnote>
                <para>Schmidt para 50, citing Tim Berners Lee, “Linked Data.” “Design Issues:
                    Architectural and Philosophical Points,” 2006. Last modified June 18, 2009.
                        <link xlink:href="http://www.w3.org/DesignIssues/LinkedData.html"
                        >http://www.w3.org/DesignIssues/LinkedData.html</link>. Accessed 28 April
                    2020.</para>
            </footnote>. Yet this very document-centric orientation is precisely where we should
            recognize the liberating potential of learning to write intensively with the XML stack,
            that is, an intellectual freedom from the workings of reductive federated processing
            mechanisms. The mass scale interoperation that Schmidt and others presume is urgently
            needed for digital scholarly editions (one particular kind of digital markup project)
            would separate the scholar from the means of production because the writing of scholars
            will always pose problems for developers who want to simplify and standardize treatment
            of their work. Reducing all annotation to standoff triple-stores from the start would
            inhibit scholarship because it separates the analysis of the text into machine-readable
            ingestions, and further it presumes that one scholar’s application of the same
            triple-store ontology will match another’s. Separating layers from the start of
            constructing a scholarly edition project will not make the work any more objective, but
            there are other ways to make the documentary work sharable and reviewable by means of
            interchange. Prioritizing interoperation by separating it into packaged layers will
            lessen the capacity of scholars who write with markup. When we consider markup as
            writing intensive, we should not prioritize interoperation over interchange, because
            interoperation reduces to simple commonalities and interchange explores and creates
            labyrinths. We need not be ashamed of the XML and TEI for generating complicated
            structures and giving impatient developers headaches. We would do better to encounter
            those structures as building materials the way writers do, and give our students the
            tools to build with them. Rather than designing projects primarily to suit the needs of
            developers or content management systems, markup practitioners can learn the writing
            intensive way to control the developing tools as their writing instruments. There will
            be a time and place for the content management system optimized for interoperation, but
            this should not be the only way that students and scholars learn to write with
            markup.</para>
        <para>Eschewing the reduction of scholarly markup to prefabricated publication systems poses
            inconvenience but also leads to a learning that encourages new systems of thinking and
            gives writers access to their own means of production. The learning required takes
            weeks, not years, and is suitably incorporated in a university semester without needing
            specialized computing prerequisites. Such a course could take a concentration within a
            discipline like English Literature, as Kate Singer’s class at Mount Holyoke did, to
            concentrate collectively on constructing a digital edition of a collection of poems.
            Singer found that the <quote>broad-based ‘humanities language’ of the TEI enabled
                students to question, historicize, and reconsider the poetic terminology we use to
                describe poems</quote>. She and her students found that the controlled vocabulary of
            the TEI, in prioritizing larger patterns of structure while permitting customization to
            the encoder of historically constructed and shifting categories of poetic genre, left
            room for a community of scholars to rethink form or apply the old constructions as they
            saw fit. In the context of a course, that work can be excitingly experimental. The
            pedagogical benefit of engaging students in markup and its applications was to foster
            decision-making, documentation, and design thinking, as Singer found her students eager
            to take on design decisions for customizing their own interface for their edition. Not
            only did they benefit by gaining tech skills, but they also became more observant
            readers of poetry as well as the interfaces and infrastructures of larger-scale digital
            scholarly editions they encountered. <quote>This kind of interpretive markup may,
                finally, give us some inkling of how TEI might be used as an analytical tool for
                smaller-scale, case-based projects perfect for undergraduates as they learn to parse
                and categorize their own textual situations.</quote><footnote>
                <para>Kate Singer, <quote>Digital Close Reading: TEI for Teaching Poetic
                        Vocabularies</quote>, <emphasis role="ital">The Journal of Interactive
                        Technology &amp; Pedagogy</emphasis> issue 3: 15 May 2013. <link
                        xlink:href="https://jitp.commons.gc.cuny.edu/digital-close-reading-tei-for-teaching-poetic-vocabularies/"
                        >https://jitp.commons.gc.cuny.edu/digital-close-reading-tei-for-teaching-poetic-vocabularies/</link>.
                    Accessed 28 April 2020.</para>
            </footnote>. Courses like these prioritize the intellectual engagement of a class with
            the document objects they are investigating, and here the markup is clearly a research
            and investigation tool. The markup data is more valuable than fitting it to a single
            uniform publication framework.</para>
        <para>The XML family of languages were designed not only to be widely accessible, but also
            to be a vocabulary that the writer controls, consults, remixes, and transforms. It does
            not take very long to acquaint new coders to the rules of how to tag a document, or how
            to turn a <quote>plain text</quote> document into an XML document, though often people
            experience a little frustration with typing in the attributes or figuring what they can
            do with attributes. The first week or two of a class that involves markup methods can
            orient people to the basic rules of well-formedness, but that quickly introduces an
            engaging intellectual experience when we ask students to develop their own hierarchies
            to organize what they are reading, and when we invite our students to try to recognize
            what is implicit, and find ways to use elements, attributes, or comments to make that
            explicit. The act of inscribing markup has been recognized as a writing process, but if
            it goes no further than an exercise in tagging, perhaps we should consider this
            something like writing a reflective paper, a response that sharpens one’s observation
            and critical thinking skills.</para>
        <para>In my years of teaching undergraduates to code, I notice in the first couple of weeks
            that certain students have difficulties with conceptualizing dependencies, or what the
            relationship between an element and an attribute and its value ought to be. They
            sometimes prepare shallow hierarchies, and instead of bundling list items together in a
            cluster, make a very flat tree where every line is its own entry. These students benefit
            from seeing more detailed markup, and also from understanding something about how the
            markup may be processed, how it can be used to organize and access particular kinds of
            information. For that reason, I have found that inviting my students to write their
            first markup on a recipe, one that contains an interesting variety of ingredients,
            measurement units, and activities, provides a very clear and easily recognizable sense
            of structure with lots of categories of information. Further, I ask them to envision a
            scenario for the encoding that tries to create a system for filing documents: <blockquote>
                <para>First, read this recipe for homemade bread, and pretend you are filing it with
                    hundreds of other recipes that you need to fit a set purpose, such as running a
                    restaurant, in which you need to keep track of kinds and quantities of
                    ingredients required. XML is written to store information, and when we apply it
                    to a situation with numbers and units, like with coding recipes, the code we
                    write can help make computerized calculations, and help optimize searching
                    across a collection for particular kinds of ingredients. Your code might be
                    designed to help categorize ingredients by what part of the grocery store they
                    can be found in. The challenge of the assignment is to write code that helps
                    categorize ingredients, mark necessary equipment, and stages for processing, but
                    the system you develop is up to you.<footnote>
                        <para><quote>XML Exercise 1</quote> Coding and Data
                            Visualization course taught at Pitt-Greensburg, 2019-2020. <link
                                xlink:href="https://dh.newtfire.org/XMLExercise1.html"
                                >https://dh.newtfire.org/XMLExercise1.html</link>. The author’s
                            series of assignments developing from XML to Relax-NG, regular
                            expressions and document up-conversion, XPath, XSLT, XQuery, as well as
                            HTML, SVG, CSS, and JavaScript are generally accessible at <link
                                xlink:href="https://dh.newtfire.org"
                                >https://dh.newtfire.org</link>. Accessed 28 April
                            2020.</para>
                    </footnote></para>
            </blockquote> Moving to the encoding of a poem or a piece of historical correspondence
            after the recipe leads to recognition of different kinds of data and observations about
            the formal dimensions and organization of patterns, as well as the interest in
            referencing different kinds of information like names, dates, people, and places, as
            well as images, motifs, rhyme. Quite frequently student beginners will take the text
            content of a document and repeat it in an attribute value, as for example wrapping code
            around a name as given in a text, and using that name in an attribute value on the
            element, until they receive some suggestions that they might want to use the attribute
            as a key for a standard identifier whenever this individual is mentioned by their
            various names. Students who have difficulty constructing dependent clauses may find the
            preparation of an informative, non-redundant hierarchy just as challenging as their
            composition courses, and while their first efforts are observably messy, they can be
            discussed in terms of how to simplify if one were to prepare a large collection and
            wanted to work systematically with a particularly interesting and tractable kind of
            data. </para>
        <para>Not until we teach students how to customize, query, or transform their markup can
            they engage with it in a way that universities would characterize as <emphasis>writing
                intensive</emphasis>. By way of reference, the Pennsylvania State University’s
            cross-curricular definition of a writing intensive course requires that writing be used
                <quote>to help students learn course content</quote>, as well as <quote>ways of
                writing in the discipline</quote>, and that it have formal expectations delivered in
            assignment sheets. These expectations are familiar to us from university composition
            courses in the requirements for research papers and thesis documents with structured
            sections, appendices, but can also be conveyed to require well-formedness in the context
            of markup languages and a documented codebase. The most significant expectations
            pertinent to the current argument, however, are to do with an expectation of a recursive
            writing process: <blockquote>
                <itemizedlist>
                    <listitem>
                        <para>Writing seen as processes that develop through iterations</para>
                    </listitem>
                    <listitem>
                        <para>Writing in the course includes a combination of formal and informal assignments<footnote>
                                <para><quote>Features of a Writing Intensive Course</quote>, Penn
                                    State Learning, 2020. <link
                                        xlink:href="https://pennstatelearning.psu.edu/features-writing-intensive-course"
                                        >https://pennstatelearning.psu.edu/features-writing-intensive-course</link>.
                                    Accessed 28 April 2020.</para>
                            </footnote></para>
                    </listitem>
                </itemizedlist>
            </blockquote> What makes the markup an <emphasis>intensive</emphasis> writing experience
            is the necessity to return to it and revise it when sharing it with a community of
            practice. When students learn to inspect the code and share its customization in project
            teams, the markup becomes subject to intensive review and systematic revision to make it
            be sharable rather than subjective. The more this is done, and the more experience that
            students and scholars gain, the more prepared they are to share in wider conversations,
            as for example, markup practitioners in the classicist community share applications of
            the EpiDoc standard, and a medievalist graduate student prepares to speak at the annual
            conference of the Text Encoding Initiative or at the annual Kalamazoo International
            Congress on Medieval Studies. As with peer-reviewed scholarship in any discipline, the
            XML code-base is subject optimally to heated debate and decisions are made befitting
            communities of practice.</para>
        <para>Just as we think of free-writing as a valuable exercise to start a first preliminary
            draft in a composition class, in teaching markup, a certain amount of mess and
            unreliability is okay as we are learning or figuring out what matters to prioritize.
            Often new coders introduce far more differently named elements than they really need, or
            that would be baffling to keep track of in a real-life project. To come to an
            understanding of how to code helpfully and meaningfully, a student needs to confront the
            problem of sharing and reproducibility—concepts parallel to the awareness of an audience
            emphasized in rhetoric and composition classes as a means to craft better sentences, to
            trim out verbosity.</para>
        <para>Learning to code the XML syntax is easy. Learning to optimize one’s preparation of XML
            takes guided practice, just like learning to write good sentences and paragraphs, and
            learning to develop a research paper or a thesis. Just like these progressively more
            complex writing activities, we can identify levels of intensity in increasing
            applications of markup technologies, and the challenges to the thinking and
            communication process are remarkably similar. The increasing intensity is not simply due
            to learning new technologies, but rather becomes gradually more intensive in cognitive
            ways. The process of becoming a better reader and writer is also the process of becoming
            more adept in organizing and processing information. Writing may be easily recognizable
            in the practice we call mere tagging in first-time coders, but the way one becomes a
            better writer with markup is by learning what can be done with and made from the markup.
            The processes of navigating, extracting, transforming, and remixing data marked in an
            XML tree define the <emphasis>intensive</emphasis> part of the writing process. When
            students learn only tagging and do not learn how to process their own code to visualize
            and analyze the data they have marked, they remain unaware of what the markup makes
            possible, and they may often be unaware of the problems imposed by imprecision and
            inconsistency. They may be tagging correctly, but not in a way that communicates
            meaningfully or reliably. Further, in becoming aware of the human unreliabilities in
            applying markup, they may come away with the idea that the tree structures we create are
            subjective and arbitrary, and they would be reinforced in this thinking by old arguments
            from those who find embedded markup a source of intrusive confusion. <footnote>
                <para>Johanna Drucker has made this assertion that embedded markup confuses levels of discourse: <quote>Putting content markers into the plane of discourse (a tag that identifies the semantic value of
                        a text relies on reference, even though it is put directly into the character
                        string) <emphasis>as if</emphasis> they are marking the plane of reference is a
                        flawed practice. Markup, in its very basis, embodies a contradiction. It collapses
                        two distinct orders of linguistic operation in a confused and messy way.</quote>Johanna Drucker, <emphasis role="ital">SpecLab: Digital Aesthetics and
                        Projects in Speculative Computing</emphasis> (Chicago: University of Chicago
                    Press, 2009) n. 26. pp. 205-206. She cites Dino Buzetti as originating the argument of a fundamentally confused data model in XML in his paper, <quote>Text Representation
                        and Textual Models</quote>, ACH-ALLC 1999 Conference Proceedings. <link
                        xlink:href="http://www2.iath.virginia.edu/ach-allc.99/proceedings/buzzetti.html"
                        >http://www2.iath.virginia.edu/ach-allc.99/proceedings/buzzetti.html</link>.
                    Accessed 28 April 2020.</para>
            </footnote> This is an unfortunately binary way of thinking about embedded markup as
            fundamentally disordered in permitting distinct semantic fields of interpretation. The
            location of the <quote>mess</quote> is not so much in the orderly tree of XML as in the
            practice of writing human and machine-readable code. This is not a matter of all
            embedded markup embodying contradictions, but rather a matter of finding ways of
            imperfectly confronting a mess that can be shared and found useful—the practice of
            embedding markup very much is the act of reading and writing itself. The markup itself
            is only a mess to the extent that it defies comprehension, navigation, and processing by
            an informed reader of markup. Against this dismissal of markup as fundamental confusion
            we should counter with the concept of <emphasis>blind interchange</emphasis>, as Syd
            Bauman defined it in 2011: <blockquote>
                <para>you want my data; you go to my website or load my CD and download or copy both
                    the data of interest and any associated files (e.g., documentation or
                    specifications like a TEI ODD, a METS profile, or the Balisage tag library);
                    based on your knowledge of my data that comes from either the documents
                    themselves or from the associated files (or both), you either change my data to
                    suit your system or change your system to suit my data as needed. Human
                    intervention, but not direct communication, is required.<footnote>
                        <para>Bauman, Syd, “Interchange vs. Interoperability,” <emphasis role="ital"
                                >Proceedings of Balisage: The Markup Conference 2011. Balisage
                                Series on Markup Technologies</emphasis>, vol. 7 (2011). <link
                                xlink:href="https://doi.org/10.4242/BalisageVol7.Bauman01"
                                >https://doi.org/10.4242/BalisageVol7.Bauman01</link>.</para>
                    </footnote></para>
            </blockquote> Far from posing a <quote>mess</quote>, the actions of documenting
            descriptive markup make it sustainable and sharable when the encoder is removed in time
            and space and technological delivery system from those who encounter the code. This is
            the benefit of the tangle and weave of literate programming, and it is reinforced by
            communities that encounter the code and interact with it. Or rather, the
                <quote>mess</quote> of markup is indistinguishable from the <quote>mess</quote> of
            writing; both may be ordered with care and explanation.</para>
        <para>Students often improve their markup dramatically when they learn to write Relax NG
            schema code, that creates rules for encoding. This may be a first data-modeling
            experience for students in a general education context, when they are called upon to
            think in a <quote>meta</quote> or higher order reflective way about formalizing their
            code, and making it possible for others to understand it and reproduce it. Learning to
            write schema code and learning to navigate and parse the markup also leads to writing
            comments to explain decisions and document the code.</para>
        <para>Because the XML family of languages is amenable to rapid learning, a student can
            become a <quote>stack developer</quote> easily in the course of a semester, as Clifford
            Anderson observed of the course he taught students in XQuery: <quote>XQuery makes it
                possible for students to become productive without having to learn as many computer
                science or software engineering concepts. A simple four or five line FLWOR
                expression can easily demonstrate the power of XQuery and provide a basis for
                students' tinkering and exploration.</quote><footnote>
                <para>Anderson, Clifford B. <quote>On Teaching XQuery to Digital Humanists</quote>,
                        <emphasis role="ital">Proceedings of Balisage: The Markup Conference 2014.
                        Balisage Series on Markup Technologies</emphasis>, vol. 13 (2014). <link
                        xlink:href="https://doi.org/10.4242/BalisageVol13.Anderson01"
                        >https://doi.org/10.4242/BalisageVol13.Anderson01</link>.</para>
            </footnote> Further, learning to process markup leads code-writers to a decision making
            process about streamlining the code-base, making it more legible, tractable, XPath-able.
            The more XPath people learn, the better equipped they are to understand the actionable
            aspects of the code they have created. Learning XPath and writing XSLT or XQuery moves a
            coder from following rules obediently so that others can process the data, to becoming
            an active intellectual investigator.</para>
    </section>
    <section>
        <title>An example of writing intensive interchange work: two university projects on Emily
            Dickinson </title>
        <para>University students can and do create projects <quote>built to last</quote>, that is,
            launched in a way that others can build on and continue based on the documentation they
            provide. As a case in point, let us consider two markup projects, decades apart,
            addressing the poetry of Emily Dickinson.</para>
        <para>The first is a proof-of-concept proposal for a PhD thesis prepared by then graduate
            student at University of Virginia, Michele Ierardi, and as of 2020, it is now only
            accessible on the web from the Wayback Machine: <link
                xlink:href="https://web.archive.org/web/20191014042502/http://www.cs.virginia.edu/~ajf2j/emily/stab.html"
                >Translating Emily: Digitally Re-Presenting Fascicle 16</link>.<footnote>
                <para>Michele Ierardi, <emphasis role="ital">Translating Emily: Digitally
                        Re-Presenting Fascicle 16</emphasis>, ~1999. The Wayback Machine capture of
                    14 October 2019: <link
                        xlink:href="https://web.archive.org/web/20191014042502/http://www.cs.virginia.edu/~ajf2j/emily/stab.html"
                        >https://web.archive.org/web/20191014042502/http://www.cs.virginia.edu/~ajf2j/emily/stab.html</link>.
                    Accessed 28 April 2020.</para>
            </footnote> The project involved an exercise applying 1990s HTML and an early form of
            JavaScript to render Emily Dickinson’s handwritten variants on her own poems in a way
            that did not demote those variants to a footnote, but gave them equal space using the
            capacities of hypertext. On reading a Dickinson’s poems on the site, the reader would
            encounter Dickinson’s own different versions of a line in slowly flashing text. The
            editor’s hope in designing her interface was to make readers more aware of Dickinson’s
            open-endedness, in not cancelling out multiple versions of a line, that all
            possibilities could coexist. The site was a proof of concept that did not materialize
            into a PhD thesis project, but it persisted and influenced my teaching of American
            Literature courses when I wanted to share Dickinson’s unusual writing process with my
            students and give them an experience of an interesting and accessible (if slightly
            hypnotizing) digital edition interface. The JavaScript on the site ceased to function
            around 2010, and soon thereafter I began seeking a way to continue accessing this
            cleanly and simply encoded project in a way that would still benefit my students.</para>
        <para>In 2015, soon after I had begun teaching courses in coding and the XML stack at
            Pitt-Greensburg, I was fortunate to find a group of students interested in poetry and
            fascinated by the possibilities of digital archive recovery work. The students and I
            contacted Michele Ierardi and obtained her permission to reconstruct her site. This
            involved converting the code from HTML to TEI P5, as well as adding more data researched
            and supplied by my students to include TEI critical apparatus markup that would encode
            Dickinson’s variants as well as other printed versions of the same poems in a series of
            editions published after Dickinson’s death. Their new goal was to build on Ierardi’s
            work and create a readable interface for comparing the multiple versions of Dickinson’s
            poems, and to begin expanding that work to include other fascicles (the term for the
            bundles of poems that Dickinson tied together with thread). My students’ site is the
            second <link xlink:href="http://dickinson.newtfire.org/">Emily Dickinson project</link>,
            strongly bound to the first.<footnote>
                <para>Nicole Lottig, Brooke Stewart, Alex Mielnicki, Brooke Lawrence, and Rebecca
                    Parker, <emphasis role="ital">Emily Dickinson</emphasis>, Newtfire, 2015. <link
                        xlink:href="http://dickinson.newtfire.org/"
                        >http://dickinson.newtfire.org/</link>. Accessed 28 April 2020.</para>
            </footnote> These students have since graduated from university, but they continue to
            work on this project, adding a new fascicle and tinkering with the interface, and I
            understand from the ongoing project director, Nicole Lottig, that she intends to
            continue coding and developing the site to display all of Dickinson’s fascicles as a
            long-term project. An excellent sampling of the project’s interface for reading a
            Dickinson poem and seeing its variant texts and images together is its display of <link
                xlink:href="http://dickinson.newtfire.org/16/1605.html">Poem 1605</link>, which
            shows how most of the early print editions cut out Dickinson’s entire last stanza and
            typically ignored her variants. The editors share <link
                xlink:href="http://dickinson.newtfire.org/16/xml/1605variant.xml">their TEI code
                from the interface</link>, which provides an application of parallel segmentation in
            the TEI.</para>
        <para>In preparing this project, the students had the benefit of building on an earlier and
            simpler markup model, as well as a sense of purpose in giving a remarkably interesting
            project a new lease on life. They needed to study the TEI P5 guidelines and essentially
            took a <quote>crash course</quote>, as undergraduates from a range of majors in English,
            Creative Writing, and Information Sciences in manuscript encoding and textual
            scholarship, in the course of a semester. They learned to transform the code and
            designed the interface in the Fall 2015 semester, and then redesigned and improved the
            interface while investigating a new research question in a following Spring 2016 term.
            Over the course of one year, in the context of university coursework, this site took
            wings, not just as a way to read the documents, but also to investigate and visualize a
            serious research question of how these editions compare to one another. Writing XSLT and
            XQuery on the project, these students produced SVG visualizations of <link
                xlink:href="http://dickinson.newtfire.org/16/dash.html"><quote>Comparative Dash
                    Reduction</quote></link> (measuring which editions most frequently normalized
            Dickinson’s dash punctuation into commas, semicolons, or periods), and <link
                xlink:href="http://dickinson.newtfire.org/16/networkAnalysis.html">a network
                analysis</link> to investigate which editions share the most variants in common.
            This was created with XQuery to pull and calculate data from the TEI parallel
            segmentation markup: For each instance of critical apparatus markup, study the
            co-occurrence of particular witnesses. Generate a count of the number of times each
            witness appears with each of the other witnesses. This data was pulled as a simple TSV
            (tab-separated values file) and plotted in Cytoscape network analysis software.</para>
        <para>The student website documents its methodology extensively and I now use it as a model
            for my current students to prepare documentation that <link
                xlink:href="http://dickinson.newtfire.org/16/conclusion.html">features code and
                coding decisions</link>. Along the way of producing it and sustaining their
            codebase, the project team cultivated <link
                xlink:href="http://dickinson.newtfire.org/contact.html">multiple GitHub repositories
                with issue tracking</link> as they turned to new sources of data and worked to
            combine Fascicles 6 and 16 into a new site. Their writing intensive experience involved
            countless messages to each other to fix broken code, make a visualization work, update
            the website, refine the CSS and JavaScript. The professional experience with web
            development was took them far beyond what would be possible in a course in tagging and
            markup alone, or in web development within a content management system. The writing
            intensive part was unquestionably in producing and testing and refining their own
            interface. And the project keeps on giving to future students.</para>
        <para>In Fall 2019, a colleague of mine from the History department, William Campbell, did me
            the great honor of taking my coding course, following a tradition at Pitt begun when I
            took David Birnbaum’s XML-stack coding course on Obdurodon in Spring 2013.<footnote>
                <para>David J. Birnbaum, Digital Humanities, Obdurodon. <link
                        xlink:href="http://dh.obdurodon.org/">http://dh.obdurodon.org/</link>.
                    Accessed 28 April 2020.</para>
            </footnote>. Campbell launched <link xlink:href="http://brecon.newtfire.org">The Brecon
                Project</link>, together with students on his team, to study the manuscript
            tradition of the foundation charter of a Reformation-era collegiate church and school
            in Wales. The students did not need to know medieval Latin to work on the document data
            modeling and even to apply critical apparatus markup with a tightly controlled schema
            combining Relax NG and Schematron, generated from a TEI ODD customization that they
            devised and revised over the course of their project meetings. For the students and my
            History colleague involved in the project, this was their introduction to the TEI
            critical apparatus as a document data model. Naturally, they turned to previous projects
            from our course to follow some examples of critical apparatus markup in order to
            understand how to prepare their own, which was distinct since the text of the charter was not a
            bundle of poems, but nevertheless required a modeling of textual variation over time.
            Without needing to consult the Dickinson project team, the Brecon team was able to adapt
            and build on the example of their markup to take their own study in new directions.
            Alyssa Argento, a returning student who was mentoring project teams and continuing
            learning XSLT and SVG on her own, eagerly took on a challenge of trying to show how the
            manuscript and print witnesses compared quantitatively: which versions of the charter shared the most material in common,
            inspired by the example of the network analysis on the Dickinson project. Finding her
            computer unable to install the latest version of the network analysis software that the
            Dickinson team had relied on for their visualization, Argento studied the project data, worked out
            how to arrange eight witnesses as nodes in a circle, and produced a network graph by
            herself with weighted edges and sized nodes to provide a detailed visual summary of
            how much the eight different versions shared in common across 25 sections of the
            charter. Having produced a static network visualization, she then studied how to
            make it interactive by applying JavaScript to address attributes on the SVG elements and
            to associate those SVG elements with corresponding columns and rows in HTML tables containing data from each section of the charter. Her
            interactive visualization, accessible at <link
                xlink:href="http://brecon.newtfire.org/html/analysis/network.html "
                >http://brecon.newtfire.org/html/analysis/network.html</link> represents work that
            she envisioned and worked out by herself with occasional input from me and the project
            team, and while it needs work in the documentation area, it represents a line of
            succession from earlier projects in my course. I share it here to demonstrate what is
            possible for undergraduates to learn, very quickly, with the benefit of the XML
            stack.</para>
        <para>The many student projects developed in the two <quote>sibling</quote> University of
            Pittsburgh coding courses over the past decade are now my richest data set for
            comprehending the possibilities of interchange and up-conversion and development on a
            code base. Our students show us how this work is not only writing intensive in the
            moment of application, but intensifies over time as we learn new ways of doing things
            and build on the model of previous projects. We understand this work to be a long term
            process in the development of a writing discipline with markup languages.</para>
    </section>
    <section>
        <title>Writing intensive activities cultivated by XML-based semester projects</title>
        <para> When students prepare a project in markup, they are not simply writing papers to be
            filed in a course-specific context. They are preparing a research site and their work
            can often be continued by them or others. Students can be building beyond the
            constraints of a single semester, and even if they are not tempted to return to the
            project, they can leave scaffolding behind for others to continue the work or alter its
            direction, or retrieve the files. Awareness of the potential energy of the work they are
            doing can give shape to an encounter with markup languages in the course of a semester.
            The energy input over a course of weeks puts emphasis on preparing material that others
            can read and reuse. Assignments for a writing intensive experience can be constructed
            with attention to: <orderedlist>
                <listitem>
                    <para>reading the code and documentation of other projects, and building on
                        it</para>
                </listitem>
                <listitem>
                    <para>preparing documentation meant to be read by peers and professor(s) working
                        with you, and meant to be read by others who access your code from a
                        repository. Such documentation may include: <itemizedlist>
                            <listitem>
                                <para>Kanban board workflow management</para>
                            </listitem>
                            <listitem>
                                <para>README.md files in a GitHub repository</para>
                            </listitem>
                            <listitem>
                                <para>developing task lists and and issue tracking</para>
                            </listitem>
                            <listitem>
                                <para>responding to questions and assisting your teammates on a
                                    project discussion forum like Slack</para>
                            </listitem>
                        </itemizedlist></para>
                </listitem>
            </orderedlist> These are informal writing-intensive activities to do with taking
            responsibility for method and processes, for managing the intellectual content of a
            project. Studying how copyright applies to code and markup and choosing a license for
            sharing the work should also be part of this experience.</para>
        <para>Giving students access to the full set of tools in the XML arsenal and establishing
            both immediate (in-semester) short-range and long-range possibilities for their work
            will introduce students from any background to the power of markup languages and with
            the experience of writing to form and connect with communities of practice. This cannot
            fail to be a professionalizing experience. Even in developing projects that are not
            successful, there will be opportunities to recognize in failures what to document, how
            to redo the work differently, how another group might start over—the project-oriented
            awareness gives space for documentation to <quote>sunset</quote> the work. Whether or
            not students go on to use markup again after the course is over, they will have engaged
            with a powerful form of writing that marks up, investigates, curates, propagates, and
            conserves textual data. This is the very definition of a writing-intensive experience
            that is both professionalizing and cross-disciplinary in its reach. </para>

    </section>
    <section>
        <title>Coda: Teaching markup languages during a pandemic</title>
        <para>Teaching a writing-intensive course in markup modalities offers little distress for
            adaptation to a remote learning environment. In spring 2020, when the author’s
            university (then the University of Pittsburgh at Greensburg) closed the campus and moved
            all courses online, there was little difficulty in transferring learning materials to a
            new format because we had already been relying on tutorials and assignments we had
            written and posted on the web, but more importantly because we had already developed a
            sense of community in the forms of asynchronous conversation cultivated not in the
            learning management system but rather in GitHub and on Slack. Prior to the pandemic
            quarantine, during January and February project teams already had developed asynchronous
            connections, reinforced by their own emojis (a rubber duck meme associated with rubber
            duck debugging, for example). The coding class might properly be recognized as
                <quote>flipped</quote>, in which most of the learning was already taking place in an
            applied context outside of class, while student and faculty class meetings reviewed
            content all together, to learn how to interact with an unfamiliar interface or to review
            issues students are having or help address something that is not working. It was easy to
            continue the management of a course based on markup technologies in which students had
            been trained to work with project management tools and to be writing and sharing their
            documentation in GitHub repositories and over Slack channels. We did miss the in-person
            interaction on which this class relied, with instructors able to look over the shoulders
            of students to help resolve a problem on their computers. Synchronous virtual meetings
            could not replace this, but using screen captures in asynchronous chat became more
            necessary, and students are certainly challenged to verbalize things that are not
            working properly when an instructor cannot come around and see for themselves what is
            going wrong. But adding comments to code stored in the eXist-dB and the GitHub repo
            continued as it always had, and because this class had cultivated tools to be able to
            communicate and work together, they were perhaps less challenged and more bonded than
            students in the courses managed only within the learning management system. Build teams
            of developers in a class, and a pandemic may slow but not stop them. In this experience,
            the writing intensive nature of project development becomes especially beneficial in
            organizing a community.</para>
    </section>

</article>
