<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="balisage-1-5.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?>
<?xml-model href="balisage-1-5.rng" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<?xml-stylesheet type="text/xsl" href="balisage-proceedings-html.xsl"?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
    version="5.0-subset Balisage-1.5">

    <title>Is Invisible XML Ready for Undergraduates?</title>
    <subtitle>Trying ixml and XProc with Regular Expressions, Relax NG, XSLT, and Python in an
        Undergraduate Text Analysis Course</subtitle>
    <info>
        <abstract>

            <para>Is invisible XML ready for the undergraduate educational arena? In spring semester
                2025, we have been testing what it takes for university students in the Digital
                Media, Arts, and Technology program at Penn State Behrend to try writing invisible
                XML to represent text documents as a grammar in preparing XML on the way to becoming
                tractable for use in real semester text analysis projects. This paper will share
                what students have to gain from learning how to install and tinker with software in
                alpha stages and test how well it works across platforms. It will also share some
                areas that challenged students and professors alike, as well as suggestions on best
                practices in guiding people to prepare processing pipelines (with XProc) that
                incorporate ixml. Further, this paper will reflect on why this adventure was
                worthwhile. </para>
            <para><!-- EBB: THIS PARA TO BE MOVED TO THE BODY OF THE PAPER AS IT DEVELOPS -->Context:
                The Large-Scale Text Analysis class is taught in Spring semesters as part of a
                multiple-semester sequence: Students came to this class with previous Fall
                experience in text encoding with XML, transformation with XSLT, and web development
                with HTML and CSS, and semesters provide about 15 weeks with three 50-minute classes
                per week, regular daily homework and a few tests, and a strong emphasis on
                developing projects in teams. The spring Text Analysis class is usually <quote>the
                    Python-and-Regex course</quote>, and it usually involves preparing text corpora
                by generating simple XML from regularly-patterned files using search-and-replace
                operations using regular expressions. Students would then learn some XQuery to
                output portions of the texts they wish to analyze using Natural Language Processing
                libraries (spaCy or NLTK). For example, students could <quote>scrape</quote>
                collections of popular game script files and choose to output the texts that
                described decision making forks, or find out how frequently certain characters and
                items are mentioned at specific locations in the game. Or, students exploring
                readily-available TV script files like <emphasis>The Simpsons</emphasis> could
                explore characters' use of language, and once they had prepared simple XML to
                identify dialogue, speakers, and non-spoken descriptive passages, they could use
                XQuery to separate out just the portions of the texts they wished to analyze in
                plain-text inputs to provide to Python. We could even import the Saxon-C package to
                have students apply XPath and XQuery directly within their Python scripts.
                Previously, Python dominated the experience of the pipeline algorithm. This year,
                however, by introducing Invisible XML, we also could introduce XProc and formalize
                the work students did with grammar writing, schema writing, and regular expression
                matching (via XSLT) in an XML stack first, before beginning work with Python.</para>
            <para>Adding Invisible XML to the course certainly changed the students’ learning
                experience. At the time of this writing, beginning the last month of the course, the
                author finds that students approach Python with better understanding of algorithmic
                pipelines, more clarity and less trouble with installation processes, and especially
                greater comfort with command line processes. There is something more: The
                appreciation of declarative methods is balanced differently with the imperative
                programming of Python. Are students understanding the formatting and processing of
                text differently when encountering Invisible XML? At this preliminary stage of
                writing, it seems to me that students did not necessarily significantly benefit in a
                practical way for their projects from learning Invisible XML, but encountered it as
                an option alongside regular expression search-and-replace operations on the way to
                cleaning and preparing their text corpora. But in making Invisible XML a topic for
                homework and demonstration, students encountered the concept of grammars, in context
                with schema validation and regular expression matching—related to these but
                fundamentally different. The declaration of patterns, and the experience of writing
                grammars explicitly to work across platforms (Windows, Mac, Linux systems) may have
                enriched their experience of moving between declarative and imperative methods of
                text handling, and helped them to reflect on a certain fluidity of methods. The
                experience caused the author to find a place to assert the value of declarative
                methods in the 2020s, a time when natural language processing of sequential strings
                dominates the development of Large Language Models and <quote>artificial
                    intelligence</quote>. The movement from <quote>raw text</quote> to identifying
                structures as nodes, and then extracting text from nodes for meaningful natural
                language processing, with findings expressed, visualized, and output on websites
                involves a round-trip adventure with text and code formats. Why is Invisible XML
                beneficial to students to learn in this process? The identification of structures
                involves onstructing one's own pattern recognition as XML, and being able to script
                the rules and structures makes for a multi-dimensional experience of text, both as
                architectures and as streams. Furthermore, finding our way with this helps us to
                understand there are distinct cultures in text analysis that benefit from being
                studied together. </para>
        </abstract>
        <author>
            <personname>
                <firstname>Elisa</firstname>
                <othername>E.</othername>
                <surname>Beshero-Bondar</surname>
            </personname>
            <personblurb>
                <para>Elisa Beshero-Bondar explores and teaches document data modeling with the XML
                    family of languages. She serves on the TEI Technical Council and is the founder
                    and organizer of the <link xlink:href="https://digitalmitford.org"
                        xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">Digital
                        Mitford project</link> and <link
                        xlink:href="https://digitalmitford.github.io/DigMitCS/" xlink:type="simple"
                        xlink:show="new" xlink:actuate="onRequest">its usually annual coding
                        school</link>. She experiments with visualizing data from complex document
                    structures like epic poems and with computer-assisted collation of differently
                    encoded editions of <link xlink:href="https://frankensteinvariorum.github.io/"
                        xlink:type="simple" xlink:show="new" xlink:actuate="onRequest"><emphasis
                            role="ital">Frankenstein</emphasis></link>. Her ongoing adventures with
                    markup technologies are documented on <link xlink:href="https://newtfire.org"
                        xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">her
                        development site at newtfire.org</link>. </para>
            </personblurb>
            <affiliation>
                <jobtitle>Chair</jobtitle>
                <orgname>TEI Technical Council</orgname>
            </affiliation>
            <affiliation>
                <jobtitle>Professor of Digital Humanities</jobtitle>
                <jobtitle>Program Chair of Digital Media, Arts, and Technology</jobtitle>
                <orgname>Penn State Erie, The Behrend College</orgname>
            </affiliation>
            <email>eeb4@psu.edu</email>
        </author>
        <keywordset role="author">
            <keyword>invisible XML</keyword>
            <keyword>ixml</keyword>
            <keyword>declarative markup</keyword>
            <keyword>declarative methods</keyword>
            <keyword>imperative methods</keyword>
            <keyword>Python</keyword>
            <keyword>XSLT</keyword>
        </keywordset>
    </info>
    <section>
        <title>TBD</title>
        <para>...</para>

    </section>

</article>
